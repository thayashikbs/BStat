[["index.html", "ビジネス統計 1 はじめに 1.1 コースの目的 1.2 統計学/統計的手法の学習について 1.3 ビジネス応用における統計学の最近の趨勢 1.4 本書内の記載の注意点", " ビジネス統計 林 高樹 2025-09-02 (内容は随時更新されます) 1 はじめに 1.1 コースの目的 近年の”データサイエンス”分野の発展の中で, その支柱の分野の一つとしての 統計学の重要性が高まっている. いまや, 簡単なデータ分析であれば, ChatGPTなどの生成AIが, 人間に代わって分析を行ったり, 分析のためのプログラムを書いたりしてくれる時代となった. しかしながら, 少なくとも現状の技術水準では生成AIの出力の 正確性は保証されておらず, 生成AIの出力の正しさを確認できるのは人間である. 当面は, 人間の手による分析, 人間の頭による分析方法論の正しい理解や結果の解釈が求められるだろう. AIブームより前に始まっていた”ビッグデータ”の時代において, 多種多様かつ大量の, 組織内・外のデータを分析する技術は 会社経営において決定的に重要となっている. 一方, 統計学やデータサイエンスの一人の初学者としては, いきなり 高度なITスキルを前提とする最新の機械学習系手法を駆使したビッグデータ“解析を行おうとするのでなく, まずは, 古典的な統計的方法論を正しく“スモール・データセット”に応用できるようになることが重要である. 本コースは, 多変量解析を中心にさまざまな統計的データ分析の手法を学び, これらの手法を学術研究や実務に応用できるようになるための基盤作り目指す. 統計ソフトウェアRを利用しながら学んでいく. 1.2 統計学/統計的手法の学習について 学習の目標 統計学/統計的手法は, サイエンスとアートの二つの側面があることから, 的確な応用を行うためには, 両面を同時に, バランスよく学ぶ必要がある. 統計理論を正確に理解する 数学的に正しい概念や手続きの理解 統計手法の実践 (運用法) を学ぶ 業務経験や知識, 統計的手法の経験則, 費用対効果等の判断 ※ 統計学は数学(の一分野)ではない (数学を道具として学問体系が作られいる) 一方の理解が不十分であると, 妥当な分析が行えず, 不正確あるいは間違った分析結果や解釈につながるリスクがある. 統計学/統計的手法の学習方法 3つの要素・ルート, それに対応した教科書・参考書がある. すなわち, 入門 (文章&amp;図表主体): 手法の概念, 用途, 特徴の大雑把な理解を図る 理論 (数式主体): 手法の理論的・技術的側面, 詳細の正確な理解を図る 実習 (コード主体): 手を動かすことで手法を経験, 実践力をつける 統計学を学習するにあたっては, 理解の段階に応じて, これらの要素を, 少しずつ万遍なく学びながら, “スパイラル”状に次の段階に進んでいくのが最も効果的であると筆者は考える. すなわち, 理論の学習を全くやらず, 入門と実習のみを学習するようなアプローチは, 理論的理解のないまま統計的分析を実践することになるため危険である. 筆者の経験上, プログラミングの得意な”エンジニア系”のデータサイエンティストにはそのような傾向を持つ人が少なからずいると感じている. 書籍ごとに目的や想定する読者層は異なり, それに対応するようにこれらの要素の割合が異なる. したがって, 学習者は自身の学習目的に照らして適切な本を選択する必要がある. 本書では, Rを用いながら代表的な統計手法を学んでいく. 統計学の教科書例 Rコードによる分析例を示しながら, 各手法や理論の解説を行っている書籍は 多数存在するが, バランス良くこれらを配置していると筆者が感じる教科書のタイトルを幾つか紹介する. 【統計学/R】 山田剛史, 杉澤武俊, 村井潤一郎 (2008), Rによるやさしい統計学, オーム社 【データ分析/R】 Kosuke Imai (2017), Quantitative Social Science: An Introduction, Princeton University Press (今井耕介(著), 粕谷祐子, 原田勝孝, 久保浩樹 (訳) (2018), 社会科学のためのデータ分析入門(上)(下), 岩波書店) 【機械学習/R】 R. James, G., Witten, D., Hastie, T., Tibshirani (2013), An Introduction to Statistical Learning: with Applications in R, Wiley. (James他(著), 落海浩, 首藤信通 (訳) (2018), Rによる統計的学習入門, 朝倉書店) 参考として, 次の書籍は, コードを載せずまた数式を使った説明も殆どなしに, 文章主体で (計量経済学の) 手法の概念や分析結果の解釈の仕方を平易に説明している良書である. 山本 勲 (2015), 実証分析のための計量経済学, 中央経済社 統計学/統計的手法の学習ステップ 入門・初級ステップ - レベル①: ソフトウェアを正しく動かせる - 目的に応じた適切な手法の選択 - 適切なデータの加工, ソフトウェアの操作 - 出力結果 (帳票, 図表) の正しい見方 - レベル②: 手法の背後にある理論を理解する - (②A) 概念や定義の正しい理解 (言葉やイメージ) - (②B) 数式による厳密な理解 ※ ①の達成度を高めるためには, ②の理解を高める必要 ① ⇒ ② ⇔ ① 中級ステップ - 特定の分野における (計量経済学, 心理学, 疫学, …) 統計的手法の理解と実践が出来るようになる 1.3 ビジネス応用における統計学の最近の趨勢 統計学, さらには中核分野として内包するデータサイエンス分野において扱う 対象データの特徴として以下のような傾向がみられる 大規模化 (“ビッグデータ”) レコード数 n → 大, 変数の数 p → 大 データ数より説明変数が多い場合も （“n&lt;p問題”) 従来の統計学: 「n 小・中規模」, かつ, 「n&gt;p」 高頻度・高速化 (従来) 四半期・月次… → 1日内, 秒, ミリ秒, …, リアルタイム 非構造化 画像, 音声, テキスト等 自動化 衛星画像, アクセスログ, IoTデータ, ウェアラブル・データ, … “マルチモーダル”化 テキスト・画像・音声・動画など複数の種類のデータを一括して処理 (AIによる)自動生成 一方, 経営(学)分野への応用の観点では次のような傾向がある. 文章や発言内容の自然言語処理・テキスト解析技術の重要性の高まり BERT, GPT-4, … 生成系AI技術の活用 文章 (ChatGPT, BARD), 画像 (DALLE, Stable Solution), 音楽 (Stable Audio, Suno), 等 複数のデータソースの有機的な組合せ活用の重要性 財務諸表等の“ハードデータ” × SNS等から得られた“ソフトデータ” 外部ソース・データ ×社内業務データ … 1.4 本書内の記載の注意点 読者への注) パス名は、各自のPC環境に応じて適宜変更すること "],["r言語の基本.html", "2 R言語の基本 2.1 Rの基本プログラミング 2.2 データの型や構造 2.3 データの操作・演算 2.4 R関数 2.5 データの可視化 2.6 ファイル入出力 2.7 パッケージtidyverse", " 2 R言語の基本 2.1 Rの基本プログラミング 主な参考文献： 金 (2017),『Rによるデータサイエンス』, 森北出版. 山田他 (2008),『Rによるやさしい統計学』, オーム社. Venables, Smith, and R Development Core Team (03), R入門. http://minato.sip21c.org/swtips/R-jp-docs/R-intro-170.jp.pdf R Core Team (2024). R Language Definition, R Foundation for Statistical Computing. https://cran.r-project.org/doc/manuals/r-release/R-lang.pdf 本コースは, 基本的なRプログラミングにもっぱら限定 よりモダンなプログラミング (本コース終了後) → tidyverse 例. 松村他, 『RユーザーのためのRStudio[実践]入門]』, 技術評論社 Rコーディングスタイルの例 Google, “Google’s R Style Guide”, https://google.github.io/styleguide/Rguide.html Hadley Wickham, “Tidyverse Style Guide”, https://style.tidyverse.org/ 2.1.1 基本操作 数値 (ベクトル), 演算の直接評価 2 + 3 ## [1] 5 c(1, 2, 3, 4) ## [1] 1 2 3 4 1:4 ## [1] 1 2 3 4 変数xに値を格納. 変数xに対する演算 - 基本形: 変数名 &lt;- 代入する値 x &lt;- c(1, 2, 3, 4, 5) x = c(1, 2, 3, 4, 5) x ## [1] 1 2 3 4 5 (x &lt;- c(1, 2, 3, 4, 5)) # 代入と表示を同時に実行 ## [1] 1 2 3 4 5 x^2 ## [1] 1 4 9 16 25 x**2 ## [1] 1 4 9 16 25 xに関数を適用 mean(x) ## [1] 3 var(x) ## [1] 2.5 sd(x) ## [1] 1.581139 summary(x) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1 2 3 3 4 5 # sqrt, summary, ... その他, R言語の基本 - 空白は無視される - Pythonと異なり, インデントは意味を持たない - 一行に二つのコマンドを入力する場合は, 間をセミコロン (;) で区切る - 行頭がシャープ (#) で始まる行は丸々無視される (コメント行) - 中括弧 {} は通常、コードのブロックを作成するために使用. 主に, 条件文、ループ、関数などのブロック構造を定義する際に使用. 2.1.2 基本構文 Rでは, データの加工や分析を行う際などに, 分析者自らの手で処理の手順をプログラミングをすることができる. forループ # 繰り返し処理 (forループ) for (変数名 in 変数のリスト){ 1回分の処理内容 } ``` #### if文 {-} ``` # 条件分岐 (if文) # if (条件式) 処理1 else 処理2 x &lt;- 0 for(i in 1:10){x &lt;- x + i} x # aaa &lt;- c(1, 3, 5) for (a in aaa) print (a) ## [1] 55 ## [1] 1 ## [1] 3 ## [1] 5 2.1.3 自作関数 同様な処理を”パラメータ”を変えながら何度も実行する場合は, 関数を作っておくと便利である. ※ 関数に付与する名前として, Rですでに使われている関数名や, Rで特別な意味を持つ値 (T, Fなど)は避けること # 自作関数の作成 関数名 &lt;- function(引数1, 引数2, ...){ 処理内容 } myfunc &lt;- function(y){ x &lt;- 0 for (i in 1:y) x &lt;- x + i return(x) } # 実行例 myfunc(10) myfunc2 &lt;- function(y){ if(y &gt; 10) print(&quot;yes&quot;) else print(&quot;no&quot;) } # 実行例 myfunc2(5) ## [1] 55 ## [1] &quot;no&quot; 2.1.4 パッケージのインストール &amp; 読み込み #lda # lda関数 → このままだエラー発生 library() # インストール済パッケージ一覧 search() # 読み込み済みパッケージ一覧 library(MASS) # MASSパッケージの読み込み(ロード) search() # アタッチされたパッケージのリスト表示 lda install.packages(&quot;DAAG&quot;) # http://cran.r-project.org # http://cran.r-project.org/web/packages/googleVis/index.html # パッケージインストローラー 2.1.5 ヘルプ 関数のヘルプ R関数helpを使うか, RStudioのプルダウンメニューやHelpペインを使用 help(&quot;fivenum&quot;) # 関数fivenumのヘルプ ?fivenum 2.2 データの型や構造 ここで, R言語の基礎を理解するのに重要な二つの概念について, 初心者を念頭に正確性を犠牲にしながら概要について述べる. 実際はここでの記載よりもはるかに複雑で, 技術的にも難易度が高い. 包括的かつ技術的に正確な内容については, 例えば, https://adv-r.hadley.nz を参照されたい. 2.2.1 データの値の種類 (“データ型”) Rでは, データの取る値の主要な種類 (type) として, 実数型 (double), 整数型 (integer), 文字列型 (character), 論理型 (logical) がある. また, 実数型, 整数型はまとめて数値型 (numeric) とも呼ばれる. 初心者は, 実数型と整数型の違いは気にしなくても良い. # 実数型 3.14 2.718 # 整数型 1L 5L # 文字列型 &quot;KBS&quot; &quot;日吉&quot; # 論理型 TRUE # または, T FALSE # または, F 次に, データの値の種類として, 上記以外に応用上知っておきたいものとして, 因子型 (factor),日付型 (Date)がある. 因子型は, カテゴリーデータに対して, 日付型は日付や時刻を表すデータに対して使うことができる. Rでは, カテゴリーデータ (ベクトル) を因子型としてオブジェクトに格納しておけば, その後の統計分析においてわざわざダミー変数を作る操作は (おおむね) 不要となる. また, 日付型として格納したデータは日付や時間に関する処理において効果を発揮する. 与えられたデータに対して, R組み込み関数である factor(), as.Date() を適用することでこれらの型に変換することができる. 少しだけ発展的な内容になるが, 因子型は整数型を値に持つベクトル, 日付型は実数型を値に持つベクトルとしてR内部で扱われる (ベクトルやオブジェクトについては次に述べる). # 因子型 factor(c(&quot;L&quot;, &quot;M&quot;, &quot;H&quot;, &quot;M&quot;, &quot;L&quot;, &quot;M&quot;)) # L/M/Hの3水準の因子型ベクトル (長さ5) # 日付型 as.Date(&quot;2023-10-02&quot;) 2.2.2 データの配列の仕方 (“データ構造”) Rでは, データの配置の仕方の種類の主要なものとして, ベクトル (vector), リスト (list), 行列 (matrix), 配列(array), データフレーム (data frame) などがある. 分析に応じて, 適切なデータの構造にして処理を行う必要がある. # ベクトル c(3.14, 2.718) c(&quot;KBS&quot;, &quot;日吉&quot;) # リスト list(&quot;KBS&quot;, 1962L, 1:10) # 行列 matrix(1:8, nrow = 2, byrow = T) # 配列 arra(1:12, c(2, 3, 2)) # データフレーム data.frame(name = c(&quot;Steve&quot;, &quot;Top&quot;), income = c(40000, 50000)) ちなみに, これらの”データ構造”には階層関係があり, 行列や配列はベクトルの特別な場合, リストはベクトルの特別な場合, データフレームはリストの特別な場合である. データフレームは, リスト (異なる種類のデータを同時に要素として持つ) でありながら, リストの各要素 (ベクトル) の長さが等しく, 2次元の行列の形式にデータが並べられたものである. R言語では, ベクトルが最も基本的な”データ構造”である. Rを用いた統計分析では, データフレームを用いるケースが非常に多いため, データフレームを使えるようになることが必須である. Rで分析を行う場合には, データや関数 (データ処理するための手続きを書いたコード) をオブジェクト (object) と呼ばれる”箱”に名前を付けて一旦格納し, その名前を呼び出す形で処理を実行するのが便利である. 量的変数や質的変数を同時に持つデータセットの分析には, データフレームが便利である. オブジェクトにはクラス (class) というオブジェクトの持つデータ構造の種類の属性が付与される. なお, Rには, type, class, modeの3つの”型”が存在し混乱しやすい. 初心者は違いを気にする必要はなく, 大雑把に, 上の”データ型”は関数 typeof(), “データ構造”は関数 class() により調べることができると知っていれば十分である. 興味のある読者は以下を参照: https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Attributes 特別な値 Rにおける分析において注意や対処が必要な, データの取り得る特別な値として, - NA (欠損値) - NULL (非存在) - NaN (非数値) - Inf (無限大) これらの値をテストする関数が用意されている. is.na() is.null() is.nan() is.infinite() is.finite() # NAの含まれている例 x &lt;- c(1, NA, 3, 4, 5) x == NA ## [1] NA NA NA NA NA is.na(x) ## [1] FALSE TRUE FALSE FALSE FALSE mean(x) ## [1] NA mean(x, na.rm = T) ## [1] 3.25 # NULLの含まれている例 x &lt;- 1:5 names(x) &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;) x ## a b c d e ## 1 2 3 4 5 names(x) &lt;- NULL x ## [1] 1 2 3 4 5 # NaN, Infの発生例 0 / 0 ## [1] NaN 1 / 0 ## [1] Inf 上の”データ型”や”データ構造”を調べる関数も用意されている. # 整数値を持つ行列の例 abc &lt;- matrix(1:8, nrow = 2, byrow = T) is.numeric(abc) ## [1] TRUE is.integer(abc) ## [1] TRUE is.matrix(abc) ## [1] TRUE typeof(abc) ## [1] &quot;integer&quot; class(abc) ## [1] &quot;matrix&quot; &quot;array&quot; mode(abc) ## [1] &quot;numeric&quot; str(abc) ## int [1:2, 1:4] 1 5 2 6 3 7 4 8 2.2.3 ベクトル # 以下は, 互いに等価 aaa &lt;- c(2, 4, 6, 8) # 変数aaaに数値ベクトル(2,4,6,8)を割り当てる aaa = c(2, 4, 6, 8) aaa = seq(2, 8, 2) c(2, 4, 6, 8) -&gt; aaa aaa &lt;- 1:4 * 2 # assign(&quot;aaa&quot;, c(2, 4, 6, 8)) # 値を割り当てる際に, &quot;環境&quot;を指定することができる # ベクトルの長さ length(aaa) # 文字列ベクトル bbb &lt;- c(&quot;東京&quot;, &quot;埼玉&quot;, &quot;千葉&quot;, &quot;神奈川&quot;) # ベクトルの各要素に名前 (ラベル) を付与 names(aaa) &lt;- bbb # ベクトル要素の取り出し bbb[1] bbb[c(2, 4)] bbb[c(T, F, T, F)] # インデックスの値がT (TRUE) の要素の取り出し bbb[c(T, F, F)] # 注意 ## [1] 4 ## [1] &quot;東京&quot; ## [1] &quot;埼玉&quot; &quot;神奈川&quot; ## [1] &quot;東京&quot; &quot;千葉&quot; ## [1] &quot;東京&quot; &quot;神奈川&quot; 2.2.4 行列 matrix(0, 3, 4) # 全要素0の3x4-行列 matrix(0:4, 3, 4) # 行列の値に使うベクトル (0:4) の長さと 行数 (3)・列数 (4) が不一致 ## Warning in matrix(0:4, 3, 4): data length [5] is not a sub-multiple or multiple ## of the number of rows [3] ## [,1] [,2] [,3] [,4] ## [1,] 0 0 0 0 ## [2,] 0 0 0 0 ## [3,] 0 0 0 0 ## [,1] [,2] [,3] [,4] ## [1,] 0 3 1 4 ## [2,] 1 4 2 0 ## [3,] 2 0 3 1 ccc &lt;- matrix(c(3, 2, 1, 6, 5, 4), 2, 3) # 2x3-行列 ccc[1, 1] # (1, 1)成分 ## [1] 3 ccc[1, ] # 第1行(行ベクトル) ## [1] 3 1 5 ccc[, 1] # 第1列(列ベクトル) ## [1] 3 2 ccc[-2, ] # 2行目を除く → 2x4-行列 ## [1] 3 1 5 ccc[, -2] # 2列目を除く → 3x3-行列 ## [,1] [,2] ## [1,] 3 5 ## [2,] 2 4 dim(ccc); nrow(ccc); ncol(ccc) # セミコロン(;)により, 複数のコマンドを1行に収め, 順次実行 ## [1] 2 3 ## [1] 2 ## [1] 3 ccc[2, 3] &lt;- 10 # (2, 3)成分に値10を代入 # 行列にラベルを付与 colnames(ccc) &lt;- c(&quot;大阪&quot;, &quot;京都&quot;, &quot;名古屋&quot;) # 列ラベル rownames(ccc) &lt;- c(&quot;2012&quot;, &quot;2013&quot;) # 行ラベル ccc ## 大阪 京都 名古屋 ## 2012 3 1 5 ## 2013 2 6 10 t(ccc) # 転置 ## 2012 2013 ## 大阪 3 2 ## 京都 1 6 ## 名古屋 5 10 2.2.5 リスト ベクトル, 行列, 配列, リスト等の異なる型(&amp;異なる長さ)のオブジェクトを一つにまとめたオブジェクト L1 &lt;- list(rep(&quot;A&quot;, 3), 1:0, matrix(1:8, 2, 4)) L1[[1]] # 1番目の要素(変数)の取り出し k &lt;- list (name = &quot;Taro&quot;, salary = 50000, male = T) k2 &lt;- list (&quot;Taro&quot;, 50000, T) # 要素名 (タグ)なしの場合 k$sal # 要素名は省略形可 # リストはベクトルの一種 (recursive vector) # 一方, 通常のベクトルはatomic vector (それ以上分解できない) # vector()からリスト生成する場合 z &lt;- vector (mode = &quot;list&quot;) z[[&quot;abd&quot;]] &lt;- 5 k[1:2] # 元のリストの部分リスト k2 &lt;- k[2] class(k2); str(k2) k2a &lt;- k[[2]] # 2番目の要素(変数)の取り出し (要素の型を持つ結果を返す) # k[[1:2]] # --&gt; エラー class(k2a); str(k2a) ## [1] &quot;A&quot; &quot;A&quot; &quot;A&quot; ## [1] 50000 ## $name ## [1] &quot;Taro&quot; ## ## $salary ## [1] 50000 ## ## [1] &quot;list&quot; ## List of 1 ## $ salary: num 50000 ## [1] &quot;numeric&quot; ## num 50000 リストの要素追加・削除 z &lt;- list(a = &quot;abcd&quot;, b = 10) z$c &lt;- &quot;piano&quot; z[[4]] &lt;- 15 z[5:6] &lt;- c(TRUE, FALSE) z$b &lt;- NULL # xxx &lt;- 1:10 yyy &lt;- 0.5 * xxx + rnorm(10) lm_res &lt;- lm(yyy ~ xxx) is.list(lm_res) lm_res[[1]] lm_res$coef lm_res[&quot;coefficients&quot;] ## [1] TRUE ## (Intercept) xxx ## -0.04471771 0.50015073 ## (Intercept) xxx ## -0.04471771 0.50015073 ## $coefficients ## (Intercept) xxx ## -0.04471771 0.50015073 2.2.6 データフレーム リストの特別な場合 長さが等しい複数のベクトルを要素に持つリスト 数値と文字列などの異なるデータが混在するデータを行列のように扱える Rにおける様々な統計分析において多用される kids &lt;- c(&quot;taro&quot;, &quot;hanako&quot;) ages &lt;- c(10, 8) d &lt;- data.frame(kids, ages, stringsAsFactors = FALSE) # 注: stringsAsFactors = T: 文字ベクトルをfactorとして扱う d str(d) # 以下の3つは等価な操作 d[[1]] # データフレームの第1列 (リストの一番目の要素) を取り出す(→ 文字列ベクトル) d$kids # 変数(kids)のように取り出す d[, 1] # 行列のように操作 (--&gt; 便利) # ただし, d[1] # 第1列をデータフレーム (リスト) として取り出す df1 &lt;- data.frame(letters[1:3], 3:1) rownames(df1) &lt;- c(&quot;大阪&quot;, &quot;京都&quot;, &quot;名古屋&quot;) colnames(df1) &lt;- c(&quot;方言種類&quot;, &quot;順位&quot;) class(df1) is.vector(df1) ## kids ages ## 1 taro 10 ## 2 hanako 8 ## &#39;data.frame&#39;: 2 obs. of 2 variables: ## $ kids: chr &quot;taro&quot; &quot;hanako&quot; ## $ ages: num 10 8 ## [1] &quot;taro&quot; &quot;hanako&quot; ## [1] &quot;taro&quot; &quot;hanako&quot; ## [1] &quot;taro&quot; &quot;hanako&quot; ## kids ## 1 taro ## 2 hanako ## [1] &quot;data.frame&quot; ## [1] FALSE 2.3 データの操作・演算 2.3.1 ベクトルの結合, ソート vec1 = 1:4 vec2 = 2:5 rbind(vec1, vec2) # ベクトルの行方向への結合 cbind(vec1, vec2) # べクトルの列方向への結合 vec3 &lt;- c(2, 5, 1, 3) sort(vec3) # 昇順 rev(vec3) # 順番を逆転させる ccc[, order(ccc[&quot;2012&quot;, ])] ccc[, sort.list(ccc[&quot;2012&quot;, ])] ## [,1] [,2] [,3] [,4] ## vec1 1 2 3 4 ## vec2 2 3 4 5 ## vec1 vec2 ## [1,] 1 2 ## [2,] 2 3 ## [3,] 3 4 ## [4,] 4 5 ## [1] 1 2 3 5 ## [1] 3 1 5 2 ## 京都 大阪 名古屋 ## 2012 1 3 5 ## 2013 6 2 10 ## 京都 大阪 名古屋 ## 2012 1 3 5 ## 2013 6 2 10 2.3.2 二項演算 x &lt;- c(1, 3, 5, 2); y &lt;- c(-3, 1, -1, -2) x + y x * y x / y x ^ 2 x &lt; y ## [1] -2 4 4 0 ## [1] -3 3 -5 -4 ## [1] -0.3333333 3.0000000 -5.0000000 -1.0000000 ## [1] 1 9 25 4 ## [1] FALSE FALSE FALSE FALSE 2.3.3 論理演算 lx &lt;- c(T, T, F); ly &lt;- c(F, F, F) lx &amp; ly lx &amp;&amp; ly # 最初の要素間の論理演算が成り立つと, 以降の演算は行わない lx | ly lx || ly # 最初の要素間の論理演算が成り立つと, 以降の演算は行わない 2.3.4 条件式 # ==, &gt;, &lt;, &gt;=, &lt;= # &amp;&amp;, || 2.3.5 行列演算 A &lt;- matrix(c(1, 2, 3, 4, 5, 6), 3, 2) B &lt;- matrix(c(2, 1, -1, -2), 2, 2) A %*% B # 行列の積 # diag # 対角行列 # solve # 逆行列 ## [,1] [,2] ## [1,] 6 -9 ## [2,] 9 -12 ## [3,] 12 -15 2.4 R関数 2.4.1 数学基本関数 # sum; sqrt; abs # exp; log; log10; log2; sin; cos # round; ceiling; floor 2.4.2 基本統計量の計算 # mean, max; min; range; median; quantile # var; sd # summary # table # cov; cor 統計 &lt;- c(rep(&quot;好き&quot;, 8), rep(&quot;嫌い&quot;, 7)) 数学 &lt;- c(rep(&quot;好き&quot;, 6), rep(&quot;嫌い&quot;, 9)) table(統計, 数学) # クロス集計表, ベクトルは同一長 ## 数学 ## 統計 好き 嫌い ## 好き 6 2 ## 嫌い 0 7 2.4.3 確率分布 # dxxx(q) # 確率密度, q:確率点 # pxxx(q) # 累積確率, q:確率点 # qxxx(p) # 確率点, p:確率 # rxxx(n) # 乱数, n:個数 # ------------------------------------------------------------------ # xxx部分: # unif(x, min, max) # 一様分布 # norm(x, mean, sd) # 正規分布 # exp(x, rate) # 指数分布 # binom(x, size, prob) # ２項分布 # pois(x, lambda) # ポアソン分布 # t(x, df) # t分布 # chisq(x, df) # カイ2乗分布 # f(x, df1, df2) # F分布 curve(xを含んだ式, from = xの左端点, to = xの右端点) # 関数のグラフ描画 curve(dnorm(x, mean = 0, sd = 1), from = -4, to = 4) curve(dnorm(x, mean = 1, sd = 2), from = -4, to = 4, add = T) # 問：t分布(自由度4)の形状は? 2.4.4 その他便利な関数 # sweep # scale # ifelse ifelse(統計 == &quot;好き&quot;, 1, 0) # apply (X, MARGIN, FUN, ...) apply(ccc, 1, sum) apply(ccc, 2, sum) colMeans(ccc) rowMeans(ccc) ## [1] 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 ## 2012 2013 ## 9 18 ## 大阪 京都 名古屋 ## 5 7 15 ## 大阪 京都 名古屋 ## 2.5 3.5 7.5 ## 2012 2013 ## 3 6 2.5 データの可視化 # 棒グラフ barplot(ccc) barplot(ccc, beside = T) barplot(ccc, beside = T, col = c(&quot;lightblue&quot;, &quot;lavender&quot;), main = &quot;test&quot;) # apply(ccc, 1, pie) # pie # hist # 折れ線グラフ (行列の各列(変数)の同時プロット) matplot(ccc, type = &quot;l&quot;) matplot(t(ccc), type = &quot;l&quot;) # 箱ひげ図 boxplot(ccc) boxplot(t(ccc)) # 散布図 # plot pairs(ccc) #install.packages(&quot;car&quot;) #library(car) #scatterplot(ccc) # install.packages(&quot;scatterplot3d&quot;); library(scatterplot3d) # scatterplot3d # その他のグラフ # coplot; mosaic plot; stars; faces; persp; image; contour # その他 # windows() #新しいグラフィック・ウィンドウを開く # par(mfrow = c(2, 2)) # より洗練されたグラフ. やや難易度が高いがモダンなアプローチ # install.packages(&quot;ggplot2&quot;, dependencies = T) library(ggplot2) ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Petal.Length)) + geom_point(aes(colour = Species)) + geom_smooth(method = &quot;lm&quot;, colour = &quot;lightblue&quot;) ## `geom_smooth()` using formula = &#39;y ~ x&#39; 2.6 ファイル入出力 2.6.1 テキストファイル読み込み ファイル読み込み用のR関数には, ファイルの格納場所 (パス) とファイル名を知らせる必要がある パスを省略すると, 現在のディレクトリ (getwd関数で確認可能) 下でファイルを探す. もし, 存在しなければ, エラーとなる ここでは, あらかじめ, 各自のPCのデスクトップ上に, “BStat_2024”という名前のフォルダ (ディレクトリ) を作成していると想定 ファイルは, カンマ(, )で区切られたcsv形式や, タブで区切られたtsv形式の テキストファイルであるとする. data1 &lt;- read.table(&quot;/[パス名]/ファイル名&quot;, header = T, row.names = 1) # オプション # header = T: 1行目が列ラベル # row.names = 1: 1列目が行ラベル または, file.path関数を使ってファイルの格納されているパス(経路)を指定しても良い. # ユーザー(yamada)が, デスクトップ(Desktop)フォルダの下に授業用フォルダ(BStat_2024)を作成した場合のパスの指定 fpath &lt;- file.path(&quot;~&quot;, &quot;Desktop&quot;, &quot;BStat_2024&quot;) # または fpath &lt;- file.path(&quot;Users&quot;, &quot;yamada&quot;, &quot;Desktop&quot;, &quot;BStat_2024&quot;) # ifile &lt;- file.path(fpath, &quot;) # 例えば, # data1 &lt;- read.table(&quot;/Users/[アカウント名]/Desktop/BStat_2024/data.txt&quot;, sep = &quot;, &quot;) # または # data1 &lt;- read.csv(&quot;/Users/[アカウント名]/Desktop/BStat_2024/data.txt&quot;, header = T, row.names = 1) # 代替的に # data2 &lt;- scan(&quot;/Users/[アカウント名]/Desktop/BStat_2024/data.txt&quot;, sep = &quot;, &quot;) #matrix(scan(&quot;/Users/[アカウント名]/Desktop/BStat_2024/data.txt&quot;, sep = &quot;, &quot;), 3, 4, byrow = T) # matrix(scan(&quot;/Users/[アカウント名]/Desktop/BStat_2024/data.txt&quot;, sep = &quot;, &quot;), 3, 4) # scan()において, 数値, 文字が混在している場合, 列ごとにデータ属性を指定する必要 # data2.txt # a 1 2 # b 2 3 # c 3 4 # data3 &lt;- scan(&quot;/Users/[アカウント名]/Desktop/BStat_2024/data.txt&quot;, sep = &quot;, &quot;, list(x = &quot;&quot;, y = 0, z = 0)) # data.frame(data2) # データフレーム化 # パスを指定せずに, テキストファイルの置かれているフォルダに移動してから # ファイル名のみを使って読み込んでも良い # setwd(&quot;/Users/[アカウント名]/Desktop/BStat_2024&quot;) data1 &lt;- read.table(&quot;data.txt&quot;, sep = &quot;, &quot;) # パッケージ&quot;foreign&quot;により, SAS, SPSS等のファイル形式のデータの読み込みが可能 2.6.2 テキストファイル書き出し write(data3, &quot;/[パス名]/ファイル名&quot;) # 例えば, # write.table(data3, &quot;/Users/[アカウント名]/Desktop/BStat_2024/data3_out1.txt&quot;) # write.table(data3, &quot;/Users/[アカウント名]/Desktop/BStat_2024/data3_out1.txt&quot;, append = T) # write.csv() # sink(&quot;/Users/[アカウント名]/Desktop/BStat_2024/data3_out1.txt&quot;) data1; data2 sink() 2.7 パッケージtidyverse tidyverseは, Hadley Wickhamによって開発が進められているRパッケージ (群) である. データのインポート, 整理, 加工, 可視化, 分析を簡単かつ効率的に行うための一連のツールを提供する. tidyverseの中核をなすパッケージには以下のものがある: ggplot2: データの可視化を行うためのパッケージ. レイヤーの概念を用い, データポイント, 統計的変換, スケール, 軸, 凡例など, グラフの各要素を個別に定義し, 組み合わせることができる. これにより, 高度にカスタマイズされたグラフを容易に作成可能. dplyr: データの操作と変形を行うためのパッケージ. フィルタリング, 並べ替え, 集約など, データフレームに対する一般的な操作を簡単かつ直感的に行うための関数を提供. tidyr: データの整理と整形を簡単にするためのパッケージ. データセットのレイアウトを整形する等のクリーニングのタスクに対応しながら,「tidy形式」としてデータを再構築するツールを提供. 例えば, データを多数の列に広げる「wide形式」と データをより少ない列にまとめるが行を増やす「long形式」間の変換, 欠損値への適切な対処, 一列を複数列に分割あるいは複数列を一列に結合する等の処理. readr: さまざまな形式のテキストデータ (例えば, csv, tsv形式) を読み込み, Rのデータフレームとして効率的にインポートするためのパッケージ. 標準のR関数よりも高速に動作し, ファイルの読み込み時によくある問題 (データ型の自動認識, 欠損値の扱い等) をより柔軟に処理. さらに, 便利な機能を持つパッケージとして, purrr: リストと関数型プログラミングを扱うためのパッケージ. リストの操作, 要素の繰り返し処理, 条件に基づく要素の抽出など, 複雑なデータ構造の操作を簡単にする関数を提供. tibble: データフレームをより現代的かつ柔軟に扱うためのパッケージで, 印刷時の見やすさ, 列名の非標準的な文字の扱い, サブセット操作の改善など, データフレームを強化し使いやすさを改善. stringr: 文字列データの操作を行うためのパッケージ. Rの標準文字列操作機能よりも一貫性と可読性に優れたインターフェースを提供し、文字列の検索, 置換, 分割, 結合などのタスクを簡単に行うことが可能. forcats: 因子 (カテゴリカルデータ) を扱うためのパッケージ. 因子水準の順序変更, 要約, 結合, 分離など, 因子型のデータを操作するための便利な関数を提供. lubridate: 日付と時刻のデータを扱うためのパッケージ. 日付や時刻の加算・減算, 部分的な抽出, 時間差の計算など, 操作を直感的かつ効率的にするための関数を提供. tidyverseは, データを「tidy」（整然とした）形式で扱うことに焦点を当てている. tidyデータの原則では, 各変数が列に, 各観測値が行に, 各種類の観測単位がテーブルに配置される. この原則に従うことで, データ分析がより直感的で効率的になる. tidyverseパッケージは, Rでのデータ分析作業を容易にし, コードをより読みやすく, 書きやすくすることを指向している. それぞれのパッケージは単独で使用することも出来るが, 一緒に使用することでより使い勝手が向上し便利である. データサイエンスにおける日常的なタスクを簡潔に, かつ効率的に行うための強力なツールセットと言える. tidyverseのホームページ https://tidyverse.tidyverse.org/ 2.7.1 Q: Rの初心者はtidyverseから勉強することは可能か? 今日では, R言語の基本を学ばずにいきなりtidyverseから勉強することは, tidyverseを入口としてR言語の学習を始めるユーザーも多いと思われる. 特にデータ分析やデータサイエンスに焦点を当てている初心者にとっては代替的な選択肢である. tidyverseは, データの取り扱いを直感的かつ効率的にすることを目的として設計されており, その構文は初心者にとって学びやすいように工夫されている. tidyverseの利点: 直感的な構文: tidyverseの関数は覚えやすく, 理解しやすい構文を持っているため, R言語の初心者でも扱いやすい. データ分析のワークフローを強化: tidyverseはデータのインポート, 整理, 加工, 可視化, 分析という一連のデータ分析プロセスに対応するツールを提供する. これにより, データ分析の基本的な流れを簡単に学ぶことができる. 広範なコミュニティとサポート: tidyverseはRユーザー内に多くの熱狂的なファンがいて, コミュニティを形成している. オンラインでのサポートや学習リソースが豊富にある. 注意点: R言語の基本概念の理解の必要性: R言語の基本的な概念 (変数の割り当て, 関数の使用方法, データ型など) は、tidyverseを効率的に使用するためにも理解しておく必要あり. 限定的な機能: tidyverseだけではカバーできないR言語の機能も多くある. すなわち, tidyverseから学習を始めても, いずれはR言語のより広範な機能やパッケージにも目を向けることが必要. tidyverseに含まれるパッケージを利用すると, 確かに多くの複雑な処理が簡潔かつエレガントに書けたりすることがあり, その機能性を実感することも多い. しかし, Rプログラミングを行っている中で, R言語の基本を知らないと困るようなことの方が多い. よって, 筆者の考えでは, Rの初学者はいきなりtidyverse系を軸に学習を開始するよりは, tidyverseに含まれるパッケージはあくまでRの多数あるパッケージの一部であると位置付けて, 標準的なRを学びながらこれらのパッケージの用法を学ぶというスタンスで良い. 本コースは, tidyverse系の扱いはこのような方針に従って進めるものとする. 2.7.2 tidyverseの基本 サンプルコードの出所: ChatGPT (GPT-4) 以下, tidyverseの基本を理解するために, データのインポート, 加工, そして可視化のステップを含むシンプルなチュートリアルを紹介する. ここでは, tidyverseの中のreadr, dplyr, ggplot2の三つのパッケージを使用する. これらはtidyverseの中で最もよく使用されるパッケージである. ステップ 1: tidyverseをインストールして読み込む まず, tidyverseパッケージをインストールし, ライブラリに読み込む. # tidyverseパッケージのインストール # install.packages(&quot;tidyverse&quot;) # ライブラリに読み込む library(tidyverse) ## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.4 ✔ readr 2.1.5 ## ✔ forcats 1.0.0 ✔ stringr 1.5.1 ## ✔ ggplot2 3.5.1 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.3 ✔ tidyr 1.3.1 ## ✔ purrr 1.0.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors ステップ 2: データをインポートする tidyverseには様々なサンプルデータが含まれている. ここでは, mtcarsデータセットを使用する. mtcarsは, 1974年のMotor Trend US誌に掲載された32台の自動車に関するデータである. # mtcarsデータセットを使用する data &lt;- mtcars ステップ 3: データを加工する dplyrを使用してデータを加工する. ここでは, mpg（ガロンあたりのマイル数）が20を超える車両のみを選択し、cyl（シリンダー数）ごとの平均mpgを計算する. # dplyrを使ってデータをフィルタリングし、集約する filtered_data &lt;- data %&gt;% filter(mpg &gt; 20) %&gt;% group_by(cyl) %&gt;% summarise(mean_mpg = mean(mpg)) # 結果を表示 print(filtered_data) ## # A tibble: 2 × 2 ## cyl mean_mpg ## &lt;dbl&gt; &lt;dbl&gt; ## 1 4 26.7 ## 2 6 21.1 ステップ 4: データを可視化する 最後に, ggplot2を使ってデータの可視化を行う. ここでは, cylごとのmean_mpgを棒グラフで表示する. # ggplot2を使ってデータを可視化 ggplot(filtered_data, aes(x = factor(cyl), y = mean_mpg)) + geom_bar(stat = &quot;identity&quot;, fill = &quot;blue&quot;) + theme_minimal() + labs(title = &quot;Cylinder-wise Mean MPG&quot;, x = &quot;Number of Cylinders&quot;, y = &quot;Mean MPG&quot;) 関数ggplot()の別の使用例として, マルチパネル化した散布図を示す. # データを可視化する # mpgとhpの関係を示す散布図を作成し、cylごとに異なるパネルに表示する ggplot(data, aes(x = mpg, y = hp)) + geom_point() + facet_wrap(~cyl) + theme_minimal() + theme(panel.background = element_rect(fill = &quot;gray&quot;)) + labs(title = &quot;Scatterplot of MPG vs HP by Cylinder&quot;, x = &quot;Miles Per Gallon (MPG)&quot;, y = &quot;Horsepower (HP)&quot;) "],["仮説検定.html", "3 仮説検定 3.1 平均値の差の検定", " 3 仮説検定 本章では, 仮説検定の中でも, 実務において, 恐らく最も良く用いると思われる, 平均値の差の検定 独立性の検定 について説明する. 独立性の検定と共通点のある 適合度検定 についても説明する. 3.1 平均値の差の検定 t検定は, Rで標準的に用意されている関数t.test()を用いて行う. # t.test(x, y = NULL, # alternative = c(&quot;two.sided&quot;, &quot;less&quot;, &quot;greater&quot;), # mu = 0, paired = FALSE, var.equal = FALSE, # conf.level = 0.95, ...) # # # One Sample t-test # Performs one and two sample t-tests on vectors of data. 平均値の差の検定 (ペア検定) ペア検定を実施する場合には, t.test()の引数pairedを真 (TRUE, またはT) に設定する. デフォルトは,paired = Fである (ペア検定ではない). ここでは, Rにデフォルトで収録されているデータセットsleepを用いる. データセット: sleep sleep: 睡眠薬の効果を調べる実験データ - 患者10名, 2種類の睡眠薬の比較 (コントロールに対する睡眠時間の増加分) - (extra, group, ID) 20件, 患者(ID) 10名 # help(sleep) # Data which show the effect of two soporific drugs (increase in hours of sleep compared to control) on 10 patients. head(sleep); tail(sleep) #&gt; extra group ID #&gt; 1 0.7 1 1 #&gt; 2 -1.6 1 2 #&gt; 3 -0.2 1 3 #&gt; 4 -1.2 1 4 #&gt; 5 -0.1 1 5 #&gt; 6 3.4 1 6 #&gt; extra group ID #&gt; 15 -0.1 2 5 #&gt; 16 4.4 2 6 #&gt; 17 5.5 2 7 #&gt; 18 1.6 2 8 #&gt; 19 4.6 2 9 #&gt; 20 3.4 2 10 最初に, Rへの指示を簡潔にするために, attach(sleep) を実行する. これにより, sleep内に含まれる変数extra,group,IDについては, それらがsleepの変数であることをその都度教えてなくても, Rは理解できるようになる. (Rの”サーチパス”に載せる, と言う) attach(sleep) par(mfrow = c(1, 2)) plot(extra); hist(extra) 両側検定, 片側検定は, 引数alternativeの値 (“two.sided”, “less”, “greater”) で指定する. デフォルトはalteranative=\"two.sided\", すなわち, 両側検定である. # t.test(extra) # 注) デフォルトはpaired = F (ペア検定ではない) # 両側検定 t.test(extra[group == 1], extra[group == 2], paired = T) #&gt; #&gt; Paired t-test #&gt; #&gt; data: extra[group == 1] and extra[group == 2] #&gt; t = -4.0621, df = 9, p-value = 0.002833 #&gt; alternative hypothesis: true mean difference is not equal to 0 #&gt; 95 percent confidence interval: #&gt; -2.4598858 -0.7001142 #&gt; sample estimates: #&gt; mean difference #&gt; -1.58 片側検定は, 右側はalternative = \"greater\", 左側はalternative = \"greater\"で指定する. # 片側検定 t.test(extra[group == 1], extra[group == 2], paired = T, alternative = &quot;greater&quot;) # 片側 (右側) 検定) #&gt; #&gt; Paired t-test #&gt; #&gt; data: extra[group == 1] and extra[group == 2] #&gt; t = -4.0621, df = 9, p-value = 0.9986 #&gt; alternative hypothesis: true mean difference is greater than 0 #&gt; 95 percent confidence interval: #&gt; -2.293005 Inf #&gt; sample estimates: #&gt; mean difference #&gt; -1.58 t.test(extra[group == 1], extra[group == 2], paired = T, alternative = &quot;less&quot;) # 片側 (左側) 検定) #&gt; #&gt; Paired t-test #&gt; #&gt; data: extra[group == 1] and extra[group == 2] #&gt; t = -4.0621, df = 9, p-value = 0.001416 #&gt; alternative hypothesis: true mean difference is less than 0 #&gt; 95 percent confidence interval: #&gt; -Inf -0.8669947 #&gt; sample estimates: #&gt; mean difference #&gt; -1.58 boxplot(sleep) # bad example #boxplot(extra) boxplot(extra ~ group) par(mfrow = c(1, 1)) 平均値の差に関するt検定は, 二つの標本 \\((x_1,x_2,...,x_{n_1})\\), \\((y_1,y_2,...,y_{n_2})\\) の差\\(\\mu_1-\\mu_2\\)がゼロか否かを評価する統計的な手続きである (ここで, 未知の真の平均はそれぞれ, \\(\\mu_1\\), \\(\\mu_2\\)と表記する). ペア検定は, さらに, この2標本のサイズが等しく (\\(n_1=n_2\\equiv n\\)), しかも, 各々のデータ点がペア \\((x_i,y_i)\\) として扱える (“対応がある”) ような特別な場合である. 対応のあるケースの例としては, 同一の企業からデータを2種類, あるいは2時点について採取した場合である. このようなペアのケースにおける平均値の差の検定は, 2標本のまま扱うのではなく, 各データ点ペアの差 \\((x_i-y_i)\\) を取ることで1標本に集約した上で, 1標本に対する平均値ゼロのt検定として行う. すなわち, 帰無仮説\\(H_0: \\mu_1-\\mu_2=0\\)に対して, 対立仮説は, 両側検定: \\(H_1: \\mu_1-\\mu_2=0\\) 片側 (右側) 検定: \\(H_1: \\mu_1-\\mu_2&gt;0\\) 片側 (左側) 検定: \\(H_1: \\mu_1-\\mu_2&lt;0\\) である. 上のsleepデータセットのケースにおいては, 標本平均の差 (\\(\\bar{x}_1-\\bar{x}_2\\))の大きさが\\(-1.58\\)であり, 対応する分散の大きさ (上の結果では表示されていない) に比べて十分に小さい (帰無仮説であるゼロ からマイナス方向に遠く離れている). その結果, 両側検定では, p値は0.002833となり, 1%有意水準 (\\(\\alpha=0.01\\)) でも帰無仮説は棄却される こととなった. 一方, 対立仮説として, 右側 \\(H_1: \\mu_1-\\mu_2&gt;0\\) を採用した場合には, 標本から計算される平均値の差は正の値となることが期待され ((\\(\\bar{x}_1-\\bar{x}_2&gt;0\\))), これは, データセットsleepから計算された値 (\\(-1.58\\)) とは明らかに整合的ではない. このことは, 対応するp値が\\(0.9986\\)と 1に近く, 帰無仮説を棄却できない大きさとなっていることに表れている. 平均値の差の検定 ペアを構成しない一般の2標本の平均値の差に関するt検定においては, 2標本の持つ未知の分散の大きさが等しいかが問題になる. t.test()のデフォルトでは等分散性が成立しない (var.equal = FALSE) 設定となっている. この時は, Welch検定が実行される. もちろん, 等分散性が成立する場合には, var.equalの値はTまたはTRUE と指定せねばならない. この時は, 未知の分散はプール化された (“pooled”) 推定値を持ちいたt検定が行われる. A/Bテストデータ (仮想データ) デザイン A と B のどちらが平均的な購入意向を高めるか - id, group (A:旧デザイン, B:新デザイン), purchase_intent (1--7) - 標本サイズ: nA=50, nB=60 abtest_df &lt;- read.csv(&quot;purchase_1-7.csv&quot;, header = T) boxplot(purchase_intent ~ group, data = abtest_df) 等分散性の検定は, var.test()を用いることができる # 等分散性の検定 (F検定) var.test(purchase_intent ~ group, data = abtest_df) #&gt; #&gt; F test to compare two variances #&gt; #&gt; data: purchase_intent by group #&gt; F = 1.1253, num df = 49, denom df = 59, p-value = 0.6606 #&gt; alternative hypothesis: true ratio of variances is not equal to 1 #&gt; 95 percent confidence interval: #&gt; 0.6592874 1.9472951 #&gt; sample estimates: #&gt; ratio of variances #&gt; 1.125316 # ※ 省略されることも多い その上で, Welch検定か, プール化された分散推定値を用いるt検定を実行する. # 等分散の場合 ((Pooled variance使用する) t検定) t.test(purchase_intent ~ group, var.equal = T, data = abtest_df) #&gt; #&gt; Two Sample t-test #&gt; #&gt; data: purchase_intent by group #&gt; t = -4.3526, df = 108, p-value = 3.067e-05 #&gt; alternative hypothesis: true difference in means between group A and group B is not equal to 0 #&gt; 95 percent confidence interval: #&gt; -1.1449141 -0.4284192 #&gt; sample estimates: #&gt; mean in group A mean in group B #&gt; 4.480000 5.266667 # 等分散でない場合 (Welch t検定) t.test(purchase_intent ~ group, data = abtest_df) #&gt; #&gt; Welch Two Sample t-test #&gt; #&gt; data: purchase_intent by group #&gt; t = -4.3291, df = 101.99, p-value = 3.505e-05 #&gt; alternative hypothesis: true difference in means between group A and group B is not equal to 0 #&gt; 95 percent confidence interval: #&gt; -1.1470981 -0.4262352 #&gt; sample estimates: #&gt; mean in group A mean in group B #&gt; 4.480000 5.266667 自主課題: - Q. 以上の検定結果を解釈しなさい. Q. 片側検定にするには? 対立仮説の方向はどちらか? Q. 購入意向 (1-7) は順序尺度では? 正規分布を前提にしたt検定を使用して良いか? 正規性の確認方法 # ヒストグラム作成 A &lt;- abtest_df[abtest_df$group == &quot;A&quot;, &quot;purchase_intent&quot;] B &lt;- abtest_df[abtest_df$group == &quot;B&quot;, &quot;purchase_intent&quot;] hist(A, col = rgb(1, 0.5, 0, 0.5)); hist(B, col = rgb(0, 0.5, 1, 0.5), add = T) # 正規性の検定 ks.test(A, &quot;pnorm&quot;); ks.test(B, &quot;pnorm&quot;) # コルモゴロフ・スミルノフ (Kolmogorov-Smirnov) 検定 #&gt; #&gt; Asymptotic one-sample Kolmogorov-Smirnov test #&gt; #&gt; data: A #&gt; D = 0.99865, p-value &lt; 2.2e-16 #&gt; alternative hypothesis: two-sided #&gt; #&gt; Asymptotic one-sample Kolmogorov-Smirnov test #&gt; #&gt; data: B #&gt; D = 0.99865, p-value &lt; 2.2e-16 #&gt; alternative hypothesis: two-sided shapiro.test(A); shapiro.test(B) # シャピロ・ウィルク (Shapiro-Wilk) 検定 #&gt; #&gt; Shapiro-Wilk normality test #&gt; #&gt; data: A #&gt; W = 0.89953, p-value = 0.0004638 #&gt; #&gt; Shapiro-Wilk normality test #&gt; #&gt; data: B #&gt; W = 0.89262, p-value = 7.16e-05 qqnorm(A); qqnorm(B) # q-qプロット なお, 関数ggplot()を使うことで, よりエレガントなプロットを描くことが出来る. # install.packages(&quot;ggplot2&quot;) # 必要に応じてインストール library(ggplot2) ggplot(abtest_df, aes(x = purchase_intent, fill = group)) + geom_histogram(position = &quot;identity&quot;, alpha = 0.5, bins = 7, # ビンの数を適宜指定 color = &quot;grey&quot;) + # 枠線の色 (任意) scale_fill_manual(values = c(&quot;A&quot; = &quot;orange&quot;, &quot;B&quot; = &quot;lightblue&quot;)) + labs(title = &quot;Histogram of Two Groups (Overlapped)&quot;, x = &quot;Purchase Intent (1-7)&quot;, y = &quot;Count&quot;) + theme_minimal() 平均値の差の検定 (ノンパラメトリック検定) Wilcoxonの順位和検定 (Mann–WhitneyのU検定) ノンパラメトリック検定の一手法である 2群の中央値の差を調べる 外れ値に対して頑強 wilcox.test(purchase_intent ~ group, data = abtest_df) #&gt; #&gt; Wilcoxon rank sum test with continuity correction #&gt; #&gt; data: purchase_intent by group #&gt; W = 861.5, p-value = 5.992e-05 #&gt; alternative hypothesis: true location shift is not equal to 0 # A,Bを定義しておいた場合, 以下の実行も可能 # wilcox.test(A, B) 自主課題: - Q. 以上の検定結果を解釈しなさい. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
