[["index.html", "ビジネス統計 1 はじめに 1.1 コースの目的 1.2 統計学/統計的手法の学習について 1.3 ビジネス応用における統計学の最近の趨勢 1.4 本書内の記載の注意点", " ビジネス統計 林 高樹 2024-01-29 (内容は随時更新されます) 1 はじめに 1.1 コースの目的 近年の”データサイエンス”分野の発展の中で, その支柱の分野の一つとしての 統計学の重要性が高まっている. いまや, 簡単なデータ分析であれば, ChatGPTなどの生成AIが, 人間に代わって分析を行ったり, 分析のためのプログラムを書いたりしてくれる時代となった. しかしながら, 少なくとも現状の技術水準では生成AIの出力の 正確性は保証されておらず, 生成AIの出力の正しさを確認できるのは人間である. 当面は, 人間の手による分析, 人間の頭による分析方法論の正しい理解や結果の解釈が求められるだろう. AIブームより前に始まっていた”ビッグデータ”の時代において, 多種多様かつ大量の, 組織内・外のデータを分析する技術は 会社経営において決定的に重要となっている. 一方, 統計学やデータサイエンスの一人の初学者としては, いきなり 高度なITスキルを前提とする最新の機械学習系手法を駆使したビッグデータ“解析を行おうとするのでなく, まずは, 古典的な統計的方法論を正しく“スモール・データセット”に応用できるようになることが重要である. 本コースは, 多変量解析を中心にさまざまな統計的データ分析の手法を学び, これらの手法を学術研究や実務に応用できるようになるための基盤作り目指す. 統計ソフトウェアRを利用しながら学んでいく. 1.2 統計学/統計的手法の学習について 学習の目標 統計学/統計的手法は, サイエンスとアートの二つの側面があることから, 的確な応用を行うためには, 両面を同時に, バランスよく学ぶ必要がある. 統計理論を正確に理解する 数学的に正しい概念や手続きの理解 統計手法の実践 (運用法) を学ぶ 業務経験や知識, 統計的手法の経験則, 費用対効果等の判断 ※ 統計学は数学(の一分野)ではない (数学を道具として学問体系が作られいる) 一方の理解が不十分であると, 妥当な分析が行えず, 不正確あるいは間違った分析結果や解釈につながるリスクがある. 統計学/統計的手法の学習方法 3つの要素・ルート, それに対応した教科書・参考書がある. すなわち, 入門 (文章&amp;図表主体): 手法の概念, 用途, 特徴の大雑把な理解を図る 理論 (数式主体): 手法の理論的・技術的側面, 詳細の正確な理解を図る 実習 (コード主体): 手を動かすことで手法を経験, 実践力をつける 統計学を学習するにあたっては, 理解の段階に応じて, これらの要素を, 少しずつ万遍なく学びながら, “スパイラル”状に次の段階に進んでいくのが最も効果的であると筆者は考える. すなわち, 理論の学習を全くやらず, 入門と実習のみを学習するようなアプローチは, 理論的理解のないまま統計的分析を実践することになるため危険である. 筆者の経験上, プログラミングの得意な”エンジニア系”のデータサイエンティストにはそのような傾向を持つ人が少なからずいると感じている. 書籍ごとに目的や想定する読者層は異なり, それに対応するようにこれらの要素の割合が異なる. したがって, 学習者は自身の学習目的に照らして適切な本を選択する必要がある. 本書では, Rを用いながら代表的な統計手法を学んでいく. 統計学の教科書例 Rコードによる分析例を示しながら, 各手法や理論の解説を行っている書籍は 多数存在するが, バランス良くこれらを配置していると筆者が感じる教科書のタイトルを幾つか紹介する. 【統計学/R】 山田剛史, 杉澤武俊, 村井潤一郎 (2008), Rによるやさしい統計学, オーム社 【データ分析/R】 Kosuke Imai (2017), Quantitative Social Science: An Introduction, Princeton University Press (今井耕介(著), 粕谷祐子, 原田勝孝, 久保浩樹 (訳) (2018), 社会科学のためのデータ分析入門(上)(下), 岩波書店) 【機械学習/R】 R. James, G., Witten, D., Hastie, T., Tibshirani (2013), An Introduction to Statistical Learning: with Applications in R, Wiley. (James他(著), 落海浩, 首藤信通 (訳) (2018), Rによる統計的学習入門, 朝倉書店) 参考として, 次の書籍は, コードを載せずまた数式を使った説明も殆どなしに, 文章主体で (計量経済学の) 手法の概念や分析結果の解釈の仕方を平易に説明している良書である. 山本 勲 (2015), 実証分析のための計量経済学, 中央経済社 統計学/統計的手法の学習ステップ 入門・初級ステップ - レベル①: ソフトウェアを正しく動かせる - 目的に応じた適切な手法の選択 - 適切なデータの加工, ソフトウェアの操作 - 出力結果 (帳票, 図表) の正しい見方 - レベル②: 手法の背後にある理論を理解する - (②A) 概念や定義の正しい理解 (言葉やイメージ) - (②B) 数式による厳密な理解 ※ ①の達成度を高めるためには, ②の理解を高める必要 ① ⇒ ② ⇔ ① 中級ステップ - 特定の分野における (計量経済学, 心理学, 疫学, …) 統計的手法の理解と実践が出来るようになる 1.3 ビジネス応用における統計学の最近の趨勢 統計学, さらには中核分野として内包するデータサイエンス分野において扱う 対象データの特徴として以下のような傾向がみられる 大規模化 (“ビッグデータ”) レコード数 n → 大, 変数の数 p → 大 データ数より説明変数が多い場合も （“n&lt;p問題”) 従来の統計学: 「n 小・中規模」, かつ, 「n&gt;p」 高頻度・高速化 (従来) 四半期・月次… → 1日内, 秒, ミリ秒, …, リアルタイム 非構造化 画像, 音声, テキスト等 自動化 衛星画像, アクセスログ, IoTデータ, ウェアラブル・データ, … “マルチモーダル”化 テキスト・画像・音声・動画など複数の種類のデータを一括して処理 (AIによる)自動生成 一方, 経営(学)分野への応用の観点では次のような傾向がある. 文章や発言内容の自然言語処理・テキスト解析技術の重要性の高まり BERT, GPT-4, … 生成系AI技術の活用 文章 (ChatGPT, BARD), 画像 (DALLE, Stable Solution), 音楽 (Stable Audio, Suno), 等 複数のデータソースの有機的な組合せ活用の重要性 財務諸表等の“ハードデータ” × SNS等から得られた“ソフトデータ” 外部ソース・データ ×社内業務データ … 1.4 本書内の記載の注意点 読者への注) パス名は、各自のPC環境に応じて適宜変更すること "],["r言語の基本.html", "2 R言語の基本 2.1 Rの基本プログラミング 2.2 データの型や構造 2.3 データの操作・演算 2.4 R関数 2.5 データの可視化 2.6 ファイル入出力", " 2 R言語の基本 2.1 Rの基本プログラミング 主な参考書籍: 金, 『Rによるデータサイエンス』, 森北出版 山田他, 『Rによるやさしい統計学』, オーム社 http://minato.sip21c.org/swtips/R-jp-docs/R-intro-170.jp.pdf 本コースは, 基本的なRプログラミングにもっぱら限定 よりモダンなプログラミング (本コース終了後) → tidyverse 例. 松村他, 『RユーザーのためのRStudio[実践]入門]』, 技術評論社 (中級者以上) Rコーディングスタイルを気にすると良い 例. Google’s R Style Guide: https://google.github.io/styleguide/Rguide.html 2.1.1 基本操作 数値 (ベクトル), 演算の直接評価 2 + 3 ## [1] 5 c(1, 2, 3, 4) ## [1] 1 2 3 4 1:4 ## [1] 1 2 3 4 変数xに値を格納. 変数xに対する演算 - 基本形: 変数名 &lt;- 代入する値 x &lt;- c(1, 2, 3, 4, 5) x = c(1, 2, 3, 4, 5) x ## [1] 1 2 3 4 5 (x &lt;- c(1, 2, 3, 4, 5)) # 代入と表示を同時に実行 ## [1] 1 2 3 4 5 x^2 ## [1] 1 4 9 16 25 x**2 ## [1] 1 4 9 16 25 xに関数を適用 mean(x) ## [1] 3 var(x) ## [1] 2.5 sd(x) ## [1] 1.581139 summary(x) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1 2 3 3 4 5 # sqrt, summary, ... その他, R言語の基本 - 空白は無視される - Pythonと異なり, インデントは意味を持たない - 一行に二つのコマンドを入力する場合は, 間をセミコロン (;) で区切る - 行頭がシャープ (#) で始まる行は丸々無視される (コメント行) - 中括弧 {} は通常、コードのブロックを作成するために使用. 主に, 条件文、ループ、関数などのブロック構造を定義する際に使用. 2.1.2 基本構文 Rでは, データの加工や分析を行う際などに, 分析者自らの手で処理の手順をプログラミングをすることができる. forループ # 繰り返し処理 (forループ) for (変数名 in 変数のリスト){ 1回分の処理内容 } ``` #### if文 {-} ``` # 条件分岐 (if文) # if (条件式) 処理1 else 処理2 x &lt;- 0 for(i in 1:10){x &lt;- x + i} x # aaa &lt;- c(1, 3, 5) for (a in aaa) print (a) ## [1] 55 ## [1] 1 ## [1] 3 ## [1] 5 2.1.3 自作関数 同様な処理を”パラメータ”を変えながら何度も実行する場合は, 関数を作っておくと便利である. ※ 関数に付与する名前として, Rですでに使われている関数名や, Rで特別な意味を持つ値 (T, Fなど)は避けること # 自作関数の作成 関数名 &lt;- function(引数1, 引数2, ...){ 処理内容 } myfunc &lt;- function(y){ x &lt;- 0 for (i in 1:y) x &lt;- x + i return(x) } # 実行例 myfunc(10) myfunc2 &lt;- function(y){ if(y &gt; 10) print(&quot;yes&quot;) else print(&quot;no&quot;) } # 実行例 myfunc2(5) ## [1] 55 ## [1] &quot;no&quot; 2.1.4 パッケージのインストール &amp; 読み込み #lda # lda関数 → このままだエラー発生 library() # インストール済パッケージ一覧 search() # 読み込み済みパッケージ一覧 library(MASS) # MASSパッケージの読み込み(ロード) search() # アタッチされたパッケージのリスト表示 lda install.packages(&quot;DAAG&quot;) # http://cran.r-project.org # http://cran.r-project.org/web/packages/googleVis/index.html # パッケージインストローラー 2.1.5 ヘルプ 関数のヘルプ R関数helpを使うか, RStudioのプルダウンメニューやHelpペインを使用 help(&quot;fivenum&quot;) # 関数fivenumのヘルプ ?fivenum 2.2 データの型や構造 ここで, R言語の基礎を理解するのに重要な二つの概念について, 初心者を念頭に正確性を犠牲にしながら概要について述べる. 実際はここでの記載よりもはるかに複雑で, 技術的にも難易度が高い. 包括的かつ技術的に正確な内容については, 例えば, https://adv-r.hadley.nz を参照されたい. 2.2.1 データの値の種類 (“データ型”) Rでは, データの取る値の主要な種類 (type) として, 実数型 (double), 整数型 (integer), 文字列型 (character), 論理型 (logical) がある. また, 実数型, 整数型はまとめて数値型 (numeric) とも呼ばれる. 初心者は, 実数型と整数型の違いは気にしなくても良い. # 実数型 3.14 2.718 # 整数型 1L 5L # 文字列型 &quot;KBS&quot; &quot;日吉&quot; # 論理型 TRUE # または, T FALSE # または, F 次に, データの値の種類として, 上記以外に応用上知っておきたいものとして, 因子型 (factor),日付型 (Date)がある. 因子型は, カテゴリーデータに対して, 日付型は日付や時刻を表すデータに対して使うことができる. Rでは, カテゴリーデータ (ベクトル) を因子型としてオブジェクトに格納しておけば, その後の統計分析においてわざわざダミー変数を作る操作は (おおむね) 不要となる. また, 日付型として格納したデータは日付や時間に関する処理において効果を発揮する. 与えられたデータに対して, R組み込み関数である factor(), as.Date() を適用することでこれらの型に変換することができる. 少しだけ発展的な内容になるが, 因子型は整数型を値に持つベクトル, 日付型は実数型を値に持つベクトルとしてR内部で扱われる (ベクトルやオブジェクトについては次に述べる). # 因子型 factor(c(&quot;L&quot;, &quot;M&quot;, &quot;H&quot;, &quot;M&quot;, &quot;L&quot;, &quot;M&quot;)) # L/M/Hの3水準の因子型ベクトル (長さ5) # 日付型 as.Date(&quot;2023-10-02&quot;) 2.2.2 データの配列の仕方 (“データ構造”) Rでは, データの配置の仕方の種類の主要なものとして, ベクトル (vector), リスト (list), 行列 (matrix), 配列(array), データフレーム (data frame) などがある. 分析に応じて, 適切なデータの構造にして処理を行う必要がある. # ベクトル c(3.14, 2.718) c(&quot;KBS&quot;, &quot;日吉&quot;) # リスト list(&quot;KBS&quot;, 1962L, 1:10) # 行列 matrix(1:8, nrow = 2, byrow = T) # 配列 arra(1:12, c(2, 3, 2)) # データフレーム data.frame(name = c(&quot;Steve&quot;, &quot;Top&quot;), income = c(40000, 50000)) ちなみに, これらの”データ構造”には階層関係があり, 行列や配列はベクトルの特別な場合, リストはベクトルの特別な場合, データフレームはリストの特別な場合である. データフレームは, リスト (異なる種類のデータを同時に要素として持つ) でありながら, リストの各要素 (ベクトル) の長さが等しく, 2次元の行列の形式にデータが並べられたものである. R言語では, ベクトルが最も基本的な”データ構造”である. Rを用いた統計分析では, データフレームを用いるケースが非常に多いため, データフレームを使えるようになることが必須である. Rで分析を行う場合には, データや関数 (データ処理するための手続きを書いたコード) をオブジェクト (object) と呼ばれる”箱”に名前を付けて一旦格納し, その名前を呼び出す形で処理を実行するのが便利である. 量的変数や質的変数を同時に持つデータセットの分析には, データフレームが便利である. オブジェクトにはクラス (class) というオブジェクトの持つデータ構造の種類の属性が付与される. なお, Rには, type, class, modeの3つの”型”が存在し混乱しやすい. 初心者は違いを気にする必要はなく, 大雑把に, 上の”データ型”は関数 typeof(), “データ構造”は関数 class() により調べることができると知っていれば十分である. 興味のある読者は以下を参照: https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Attributes 特別な値 Rにおける分析において注意や対処が必要な, データの取り得る特別な値として, - NA (欠損値) - NULL (非存在) - NaN (非数値) - Inf (無限大) これらの値をテストする関数が用意されている. is.na() is.null() is.nan() is.infinite() is.finite() # NAの含まれている例 x &lt;- c(1, NA, 3, 4, 5) x == NA ## [1] NA NA NA NA NA is.na(x) ## [1] FALSE TRUE FALSE FALSE FALSE mean(x) ## [1] NA mean(x, na.rm = T) ## [1] 3.25 # NULLの含まれている例 x &lt;- 1:5 names(x) &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;) x ## a b c d e ## 1 2 3 4 5 names(x) &lt;- NULL x ## [1] 1 2 3 4 5 # NaN, Infの発生例 0 / 0 ## [1] NaN 1 / 0 ## [1] Inf 上の”データ型”や”データ構造”を調べる関数も用意されている. # 整数値を持つ行列の例 abc &lt;- matrix(1:8, nrow = 2, byrow = T) is.numeric(abc) ## [1] TRUE is.integer(abc) ## [1] TRUE is.matrix(abc) ## [1] TRUE typeof(abc) ## [1] &quot;integer&quot; class(abc) ## [1] &quot;matrix&quot; &quot;array&quot; mode(abc) ## [1] &quot;numeric&quot; str(abc) ## int [1:2, 1:4] 1 5 2 6 3 7 4 8 2.2.3 ベクトル # 以下は, 互いに等価 aaa &lt;- c(2, 4, 6, 8) # 変数aaaに数値ベクトル(2,4,6,8)を割り当てる aaa = c(2, 4, 6, 8) aaa = seq(2, 8, 2) c(2, 4, 6, 8) -&gt; aaa aaa &lt;- 1:4 * 2 # assign(&quot;aaa&quot;, c(2, 4, 6, 8)) # 値を割り当てる際に, &quot;環境&quot;を指定することができる # ベクトルの長さ length(aaa) # 文字列ベクトル bbb &lt;- c(&quot;東京&quot;, &quot;埼玉&quot;, &quot;千葉&quot;, &quot;神奈川&quot;) # ベクトルの各要素に名前 (ラベル) を付与 names(aaa) &lt;- bbb # ベクトル要素の取り出し bbb[1] bbb[c(2, 4)] bbb[c(T, F, T, F)] # インデックスの値がT (TRUE) の要素の取り出し bbb[c(T, F, F)] # 注意 ## [1] 4 ## [1] &quot;東京&quot; ## [1] &quot;埼玉&quot; &quot;神奈川&quot; ## [1] &quot;東京&quot; &quot;千葉&quot; ## [1] &quot;東京&quot; &quot;神奈川&quot; 2.2.4 行列 matrix(0, 3, 4) # 全要素0の3x4-行列 matrix(0:4, 3, 4) # 行列の値に使うベクトル (0:4) の長さと 行数 (3)・列数 (4) が不一致 ## Warning in matrix(0:4, 3, 4): data length [5] is not a sub-multiple or multiple ## of the number of rows [3] ## [,1] [,2] [,3] [,4] ## [1,] 0 0 0 0 ## [2,] 0 0 0 0 ## [3,] 0 0 0 0 ## [,1] [,2] [,3] [,4] ## [1,] 0 3 1 4 ## [2,] 1 4 2 0 ## [3,] 2 0 3 1 ccc &lt;- matrix(c(3, 2, 1, 6, 5, 4), 2, 3) # 2x3-行列 ccc[1, 1] # (1, 1)成分 ## [1] 3 ccc[1, ] # 第1行(行ベクトル) ## [1] 3 1 5 ccc[, 1] # 第1列(列ベクトル) ## [1] 3 2 ccc[-2, ] # 2行目を除く → 2x4-行列 ## [1] 3 1 5 ccc[, -2] # 2列目を除く → 3x3-行列 ## [,1] [,2] ## [1,] 3 5 ## [2,] 2 4 dim(ccc); nrow(ccc); ncol(ccc) # セミコロン(;)により, 複数のコマンドを1行に収め, 順次実行 ## [1] 2 3 ## [1] 2 ## [1] 3 ccc[2, 3] &lt;- 10 # (2, 3)成分に値10を代入 # 行列にラベルを付与 colnames(ccc) &lt;- c(&quot;大阪&quot;, &quot;京都&quot;, &quot;名古屋&quot;) # 列ラベル rownames(ccc) &lt;- c(&quot;2012&quot;, &quot;2013&quot;) # 行ラベル ccc ## 大阪 京都 名古屋 ## 2012 3 1 5 ## 2013 2 6 10 t(ccc) # 転置 ## 2012 2013 ## 大阪 3 2 ## 京都 1 6 ## 名古屋 5 10 2.2.5 リスト ベクトル, 行列, 配列, リスト等の異なる型(&amp;異なる長さ)のオブジェクトを一つにまとめたオブジェクト L1 &lt;- list(rep(&quot;A&quot;, 3), 1:0, matrix(1:8, 2, 4)) L1[[1]] # 1番目の要素(変数)の取り出し k &lt;- list (name = &quot;Taro&quot;, salary = 50000, male = T) k2 &lt;- list (&quot;Taro&quot;, 50000, T) # 要素名 (タグ)なしの場合 k$sal # 要素名は省略形可 # リストはベクトルの一種 (recursive vector) # 一方, 通常のベクトルはatomic vector (それ以上分解できない) # vector()からリスト生成する場合 z &lt;- vector (mode = &quot;list&quot;) z[[&quot;abd&quot;]] &lt;- 5 k[1:2] # 元のリストの部分リスト k2 &lt;- k[2] class(k2); str(k2) k2a &lt;- k[[2]] # 2番目の要素(変数)の取り出し (要素の型を持つ結果を返す) # k[[1:2]] # --&gt; エラー class(k2a); str(k2a) ## [1] &quot;A&quot; &quot;A&quot; &quot;A&quot; ## [1] 50000 ## $name ## [1] &quot;Taro&quot; ## ## $salary ## [1] 50000 ## ## [1] &quot;list&quot; ## List of 1 ## $ salary: num 50000 ## [1] &quot;numeric&quot; ## num 50000 リストの要素追加・削除 z &lt;- list(a = &quot;abcd&quot;, b = 10) z$c &lt;- &quot;piano&quot; z[[4]] &lt;- 15 z[5:6] &lt;- c(TRUE, FALSE) z$b &lt;- NULL # xxx &lt;- 1:10 yyy &lt;- 0.5 * xxx + rnorm(10) lm_res &lt;- lm(yyy ~ xxx) is.list(lm_res) lm_res[[1]] lm_res$coef lm_res[&quot;coefficients&quot;] ## [1] TRUE ## (Intercept) xxx ## 0.5605282 0.4382210 ## (Intercept) xxx ## 0.5605282 0.4382210 ## $coefficients ## (Intercept) xxx ## 0.5605282 0.4382210 2.2.6 データフレーム リストの特別な場合 長さが等しい複数のベクトルを要素に持つリスト 数値と文字列などの異なるデータが混在するデータを行列のように扱える Rにおける様々な統計分析において多用される kids &lt;- c(&quot;taro&quot;, &quot;hanako&quot;) ages &lt;- c(10, 8) d &lt;- data.frame(kids, ages, stringsAsFactors = FALSE) # 注: stringsAsFactors = T: 文字ベクトルをfactorとして扱う d str(d) # 以下の3つは等価な操作 d[[1]] # データフレームの第1列 (リストの一番目の要素) を取り出す(→ 文字列ベクトル) d$kids # 変数(kids)のように取り出す d[, 1] # 行列のように操作 (--&gt; 便利) # ただし, d[1] # 第1列をデータフレーム (リスト) として取り出す df1 &lt;- data.frame(letters[1:3], 3:1) rownames(df1) &lt;- c(&quot;大阪&quot;, &quot;京都&quot;, &quot;名古屋&quot;) colnames(df1) &lt;- c(&quot;方言種類&quot;, &quot;順位&quot;) class(df1) is.vector(df1) ## kids ages ## 1 taro 10 ## 2 hanako 8 ## &#39;data.frame&#39;: 2 obs. of 2 variables: ## $ kids: chr &quot;taro&quot; &quot;hanako&quot; ## $ ages: num 10 8 ## [1] &quot;taro&quot; &quot;hanako&quot; ## [1] &quot;taro&quot; &quot;hanako&quot; ## [1] &quot;taro&quot; &quot;hanako&quot; ## kids ## 1 taro ## 2 hanako ## [1] &quot;data.frame&quot; ## [1] FALSE 2.3 データの操作・演算 2.3.1 ベクトルの結合, ソート vec1 = 1:4 vec2 = 2:5 rbind(vec1, vec2) # ベクトルの行方向への結合 cbind(vec1, vec2) # べクトルの列方向への結合 vec3 &lt;- c(2, 5, 1, 3) sort(vec3) # 昇順 rev(vec3) # 順番を逆転させる ccc[, order(ccc[&quot;2012&quot;, ])] ccc[, sort.list(ccc[&quot;2012&quot;, ])] ## [,1] [,2] [,3] [,4] ## vec1 1 2 3 4 ## vec2 2 3 4 5 ## vec1 vec2 ## [1,] 1 2 ## [2,] 2 3 ## [3,] 3 4 ## [4,] 4 5 ## [1] 1 2 3 5 ## [1] 3 1 5 2 ## 京都 大阪 名古屋 ## 2012 1 3 5 ## 2013 6 2 10 ## 京都 大阪 名古屋 ## 2012 1 3 5 ## 2013 6 2 10 2.3.2 二項演算 x &lt;- c(1, 3, 5, 2); y &lt;- c(-3, 1, -1, -2) x + y x * y x / y x ^ 2 x &lt; y ## [1] -2 4 4 0 ## [1] -3 3 -5 -4 ## [1] -0.3333333 3.0000000 -5.0000000 -1.0000000 ## [1] 1 9 25 4 ## [1] FALSE FALSE FALSE FALSE 2.3.3 論理演算 lx &lt;- c(T, T, F); ly &lt;- c(F, F, F) lx &amp; ly lx &amp;&amp; ly # 最初の要素間の論理演算が成り立つと, 以降の演算は行わない ## Warning in lx &amp;&amp; ly: &#39;length(x) = 3 &gt; 1&#39; in coercion to &#39;logical(1)&#39; ## Warning in lx &amp;&amp; ly: &#39;length(x) = 3 &gt; 1&#39; in coercion to &#39;logical(1)&#39; lx | ly lx || ly # 最初の要素間の論理演算が成り立つと, 以降の演算は行わない ## Warning in lx || ly: &#39;length(x) = 3 &gt; 1&#39; in coercion to &#39;logical(1)&#39; ## [1] FALSE FALSE FALSE ## [1] FALSE ## [1] TRUE TRUE FALSE ## [1] TRUE 2.3.4 条件式 # ==, &gt;, &lt;, &gt;=, &lt;= # &amp;&amp;, || 2.3.5 行列演算 A &lt;- matrix(c(1, 2, 3, 4, 5, 6), 3, 2) B &lt;- matrix(c(2, 1, -1, -2), 2, 2) A %*% B # 行列の積 # diag # 対角行列 # solve # 逆行列 ## [,1] [,2] ## [1,] 6 -9 ## [2,] 9 -12 ## [3,] 12 -15 2.4 R関数 2.4.1 数学基本関数 # sum; sqrt; abs # exp; log; log10; log2; sin; cos # round; ceiling; floor 2.4.2 基本統計量の計算 # mean, max; min; range; median; quantile # var; sd # summary # table # cov; cor 統計 &lt;- c(rep(&quot;好き&quot;, 8), rep(&quot;嫌い&quot;, 7)) 数学 &lt;- c(rep(&quot;好き&quot;, 6), rep(&quot;嫌い&quot;, 9)) table(統計, 数学) # クロス集計表, ベクトルは同一長 ## 数学 ## 統計 好き 嫌い ## 好き 6 2 ## 嫌い 0 7 2.4.3 確率分布 # dxxx(q) # 確率密度, q:確率点 # pxxx(q) # 累積確率, q:確率点 # qxxx(p) # 確率点, p:確率 # rxxx(n) # 乱数, n:個数 # ------------------------------------------------------------------ # xxx部分: # unif(x, min, max) # 一様分布 # norm(x, mean, sd) # 正規分布 # exp(x, rate) # 指数分布 # binom(x, size, prob) # ２項分布 # pois(x, lambda) # ポアソン分布 # t(x, df) # t分布 # chisq(x, df) # カイ2乗分布 # f(x, df1, df2) # F分布 curve(xを含んだ式, from = xの左端点, to = xの右端点) # 関数のグラフ描画 curve(dnorm(x, mean = 0, sd = 1), from = -4, to = 4) curve(dnorm(x, mean = 1, sd = 2), from = -4, to = 4, add = T) # 問：t分布(自由度4)の形状は? 2.4.4 その他便利な関数 # sweep # scale # ifelse ifelse(統計 == &quot;好き&quot;, 1, 0) # apply (X, MARGIN, FUN, ...) apply(ccc, 1, sum) apply(ccc, 2, sum) colMeans(ccc) rowMeans(ccc) ## [1] 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 ## 2012 2013 ## 9 18 ## 大阪 京都 名古屋 ## 5 7 15 ## 大阪 京都 名古屋 ## 2.5 3.5 7.5 ## 2012 2013 ## 3 6 2.5 データの可視化 # 棒グラフ barplot(ccc) barplot(ccc, beside = T) barplot(ccc, beside = T, col = c(&quot;lightblue&quot;, &quot;lavender&quot;), main = &quot;test&quot;) # apply(ccc, 1, pie) # pie # hist # 折れ線グラフ (行列の各列(変数)の同時プロット) matplot(ccc, type = &quot;l&quot;) matplot(t(ccc), type = &quot;l&quot;) # 箱ひげ図 boxplot(ccc) boxplot(t(ccc)) # 散布図 # plot pairs(ccc) #install.packages(&quot;car&quot;) #library(car) #scatterplot(ccc) # install.packages(&quot;scatterplot3d&quot;); library(scatterplot3d) # scatterplot3d # その他のグラフ # coplot; mosaic plot; stars; faces; persp; image; contour # その他 # windows() #新しいグラフィック・ウィンドウを開く # par(mfrow = c(2, 2)) # より洗練されたグラフ. やや難易度が高いがモダンなアプローチ # install.packages(&quot;ggplot2&quot;, dependencies = T) library(ggplot2) ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Petal.Length)) + geom_point(aes(colour = Species)) + geom_smooth(method = &quot;lm&quot;, colour = &quot;lightblue&quot;) ## `geom_smooth()` using formula = &#39;y ~ x&#39; 2.6 ファイル入出力 2.6.1 テキストファイル読み込み ファイル読み込み用のR関数には, ファイルの格納場所 (パス) とファイル名を知らせる必要がある パスを省略すると, 現在のディレクトリ (getwd関数で確認可能) 下でファイルを探す. もし, 存在しなければ, エラーとなる ここでは, あらかじめ, 各自のPCのデスクトップ上に, “BS_2023”という名前のフォルダ (ディレクトリ) を作成していると想定 ファイルは, カンマ(, )で区切られたcsv形式や, タブで区切られたtsv形式の テキストファイルであるとする. data1 &lt;- read.table(&quot;/[パス名]/ファイル名&quot;, header = T, row.names = 1) # オプション # header = T: 1行目が列ラベル # row.names = 1: 1列目が行ラベル または, file.path関数を使ってファイルの格納されているパス(経路)を指定しても良い. # ユーザー(yamada)が, デスクトップ(Desktop)フォルダの下に授業用フォルダ(BS_2023)を作成した場合のパスの指定 fpath &lt;- file.path(&quot;~&quot;, &quot;Desktop&quot;, &quot;BS_2023&quot;) # または fpath &lt;- file.path(&quot;Users&quot;, &quot;yamada&quot;, &quot;Desktop&quot;, &quot;BS_2023&quot;) # ifile &lt;- file.path(fpath, &quot;) # 例えば, # data1 &lt;- read.table(&quot;/Users/[アカウント名]/Desktop/BS_2023/data.txt&quot;, sep = &quot;, &quot;) # または # data1 &lt;- read.csv(&quot;/Users/[アカウント名]/Desktop/BS_2023/data.txt&quot;, header = T, row.names = 1) # 代替的に # data2 &lt;- scan(&quot;/Users/[アカウント名]/Desktop/BS_2023/data.txt&quot;, sep = &quot;, &quot;) #matrix(scan(&quot;/Users/[アカウント名]/Desktop/BS_2023/data.txt&quot;, sep = &quot;, &quot;), 3, 4, byrow = T) # matrix(scan(&quot;/Users/[アカウント名]/Desktop/BS_2023/data.txt&quot;, sep = &quot;, &quot;), 3, 4) # scan()において, 数値, 文字が混在している場合, 列ごとにデータ属性を指定する必要 # data2.txt # a 1 2 # b 2 3 # c 3 4 # data3 &lt;- scan(&quot;/Users/[アカウント名]/Desktop/BS_2023/data.txt&quot;, sep = &quot;, &quot;, list(x = &quot;&quot;, y = 0, z = 0)) # data.frame(data2) # データフレーム化 # パスを指定せずに, テキストファイルの置かれているフォルダに移動してから # ファイル名のみを使って読み込んでも良い # setwd(&quot;/Users/[アカウント名]/Desktop/BS_2023&quot;) data1 &lt;- read.table(&quot;data.txt&quot;, sep = &quot;, &quot;) # パッケージ&quot;foreign&quot;により, SAS, SPSS等のファイル形式のデータの読み込みが可能 2.6.2 テキストファイル書き出し write(data3, &quot;/[パス名]/ファイル名&quot;) # 例えば, # write.table(data3, &quot;/Users/[アカウント名]/Desktop/BS_2023/data3_out1.txt&quot;) # write.table(data3, &quot;/Users/[アカウント名]/Desktop/BS_2023/data3_out1.txt&quot;, append = T) # write.csv() # sink(&quot;/Users/[アカウント名]/Desktop/BS_2023/data3_out1.txt&quot;) data1; data2 sink() "],["仮説検定.html", "3 仮説検定 3.1 パート1: 平均値の差の検定 3.2 パート2: カイ二乗検定 3.3 パート3: 事例(統計テストデータ)", " 3 仮説検定 3.1 パート1: 平均値の差の検定 # t.test(x, y = NULL, # alternative = c(&quot;two.sided&quot;, &quot;less&quot;, &quot;greater&quot;), # mu = 0, paired = FALSE, var.equal = FALSE, # conf.level = 0.95, ...) # # # One Sample t-test # Performs one and two sample t-tests on vectors of data. 平均値の差の検定 (ペア検定) # sleep: Rにデフォルトで収録されているデータ 患者10名, 2種類の睡眠薬の比較 # (コントロールに対する睡眠時間の増加分) help(sleep) Data which show the effect # of two soporific drugs (increase in hours of sleep compared to control) on 10 # patients. (extra, group, ID) 20件, 患者(ID) 10名 head(sleep) #&gt; extra group ID #&gt; 1 0.7 1 1 #&gt; 2 -1.6 1 2 #&gt; 3 -0.2 1 3 #&gt; 4 -1.2 1 4 #&gt; 5 -0.1 1 5 #&gt; 6 3.4 1 6 tail(sleep) #&gt; extra group ID #&gt; 15 -0.1 2 5 #&gt; 16 4.4 2 6 #&gt; 17 5.5 2 7 #&gt; 18 1.6 2 8 #&gt; 19 4.6 2 9 #&gt; 20 3.4 2 10 attach(sleep) par(mfrow = c(1, 2)) plot(extra) hist(extra) # t.test(extra)\\t# 注) ペア検定ではない # 両側検定 t.test(extra ~ group, paired = T) # ペア検定 (両側検定 (デフォルト)) #&gt; #&gt; Paired t-test #&gt; #&gt; data: extra by group #&gt; t = -4.0621, df = 9, p-value = 0.002833 #&gt; alternative hypothesis: true mean difference is not equal to 0 #&gt; 95 percent confidence interval: #&gt; -2.4598858 -0.7001142 #&gt; sample estimates: #&gt; mean difference #&gt; -1.58 # t.test(extra[group == 1], extra[group == 2], paired = TRUE) # 片側検定 t.test(extra ~ group, paired = T, alternative = &quot;greater&quot;) # 片側 (右側) 検定 #&gt; #&gt; Paired t-test #&gt; #&gt; data: extra by group #&gt; t = -4.0621, df = 9, p-value = 0.9986 #&gt; alternative hypothesis: true mean difference is greater than 0 #&gt; 95 percent confidence interval: #&gt; -2.293005 Inf #&gt; sample estimates: #&gt; mean difference #&gt; -1.58 t.test(extra ~ group, paired = T, alternative = &quot;less&quot;) # 片側 (左側) 検定 #&gt; #&gt; Paired t-test #&gt; #&gt; data: extra by group #&gt; t = -4.0621, df = 9, p-value = 0.001416 #&gt; alternative hypothesis: true mean difference is less than 0 #&gt; 95 percent confidence interval: #&gt; -Inf -0.8669947 #&gt; sample estimates: #&gt; mean difference #&gt; -1.58 boxplot(sleep) # bad example # boxplot(extra) boxplot(extra ~ group) par(mfrow = c(1, 1)) 平均値の差の検定 # 口コミサイト(仮想データ) 2つの業種(A, B), 各20社 # 各企業に対する(元)従業員による平均評価点(1--5) x &lt;- read.table(&#39;dat_1-1.csv&#39;, # sep = &#39;,&#39;, header = T) x &lt;- read.csv(&quot;dat_1-1.csv&quot;, header = T) boxplot(x) attach(x) t.test(A, B) #&gt; #&gt; Welch Two Sample t-test #&gt; #&gt; data: A and B #&gt; t = -2.0822, df = 37.963, p-value = 0.04412 #&gt; alternative hypothesis: true difference in means is not equal to 0 #&gt; 95 percent confidence interval: #&gt; -1.097472 -0.015428 #&gt; sample estimates: #&gt; mean of x mean of y #&gt; 2.94290 3.49935 ## 正規性の検定 par(mfrow = c(1, 2)) # ks.test(A, &#39;pnorm&#39;); ks.test(B, &#39;pnorm&#39;)\\t\\t# コルモゴロフ・スミルノフ # (Kolmogorov-Smirnov) 検定 shapiro.test(A); shapiro.test(B)\\t# # シャピロ・ウィルク (Shapiro-Wilk) 検定 qqnorm(A); qqnorm(B)\\t# q-qプロット hist(A) hist(B) 平均値の差の検定 (ノンパラメトリック検定) 順位和検定: ノンパラメトリック検定の一手法 外れ値に対して頑強 # wilcox.test(x$A, x$B) wilcox.test(A, B) #&gt; #&gt; Wilcoxon rank sum exact test #&gt; #&gt; data: A and B #&gt; W = 139, p-value = 0.1022 #&gt; alternative hypothesis: true location shift is not equal to 0 # 対応のある場合 (例, 同一企業の職種A, B) plot(A, type = &quot;l&quot;, ylim = c(1, 5)) lines(B, lty = &quot;dotted&quot;) hist(A, col = &quot;red&quot;) hist(B, add = T, col = &quot;blue&quot;) t.test(A, B, paired = T) detach(x) 3.2 パート2: カイ二乗検定 # chisq.test(x, y = NULL, correct = TRUE, # p = rep(1 / length(x), length(x)), rescale.p = FALSE, simulate.p.value = FALSE, B = 2000) # chisq.test performs chi-squared contingency table tests and goodness-of-fit tests. 3.2.1 独立性検定 # 演習用データの作成 (実務では, ファイルを読み込む) d1 &lt;- matrix(c(rep(c(&quot;a1&quot;, &quot;b1&quot;), 76), rep(c(&quot;a1&quot;, &quot;b2&quot;), 15), rep(c(&quot;a1&quot;, &quot;b3&quot;), 41)), byrow = T, ncol = 2) d2 &lt;- matrix(c(rep(c(&quot;a2&quot;, &quot;b1&quot;), 95), rep(c(&quot;a2&quot;, &quot;b2&quot;), 30), rep(c(&quot;a2&quot;, &quot;b3&quot;), 85)), byrow = T, ncol = 2) d3 &lt;- matrix(c(rep(c(&quot;a3&quot;, &quot;b1&quot;), 135), rep(c(&quot;a3&quot;, &quot;b2&quot;), 70), rep(c(&quot;a3&quot;, &quot;b3&quot;), 95)), byrow = T, ncol = 2) d4 &lt;- matrix(c(rep(c(&quot;a4&quot;, &quot;b1&quot;), 69), rep(c(&quot;a4&quot;, &quot;b2&quot;), 10), rep(c(&quot;a4&quot;, &quot;b3&quot;), 29)), byrow = T, ncol = 2) data2 &lt;- rbind(d1, d2, d3, d4) colnames(data2) &lt;- c(&quot;A&quot;, &quot;B&quot;) # 商品種類(A), 販売チャネル(B) head(data2) #&gt; A B #&gt; [1,] &quot;a1&quot; &quot;b1&quot; #&gt; [2,] &quot;a1&quot; &quot;b1&quot; #&gt; [3,] &quot;a1&quot; &quot;b1&quot; #&gt; [4,] &quot;a1&quot; &quot;b1&quot; #&gt; [5,] &quot;a1&quot; &quot;b1&quot; #&gt; [6,] &quot;a1&quot; &quot;b1&quot; table(data2) # marginal totals #&gt; data2 #&gt; a1 a2 a3 a4 b1 b2 b3 #&gt; 132 210 300 108 375 125 250 (tbl &lt;- table(data2[, 1], data2[, 2])) # contingency table #&gt; #&gt; b1 b2 b3 #&gt; a1 76 15 41 #&gt; a2 95 30 85 #&gt; a3 135 70 95 #&gt; a4 69 10 29 chisq.test(data2[, &quot;A&quot;], data2[, &quot;B&quot;]) #&gt; #&gt; Pearson&#39;s Chi-squared test #&gt; #&gt; data: data2[, &quot;A&quot;] and data2[, &quot;B&quot;] #&gt; X-squared = 27.661, df = 6, p-value = 0.0001088 # chisq.test(data2[, 1], data2[, 2]) # または chisq.test(tbl) #&gt; #&gt; Pearson&#39;s Chi-squared test #&gt; #&gt; data: tbl #&gt; X-squared = 27.661, df = 6, p-value = 0.0001088 # A/Bテスト サイト導線A/Bとで, コンバージョンへの効果を比較 # \\t\\t\\t\\t\\t\\t有\\t\\t\\t\\t無 \\tサイト導線A\\t50\\t\\t\\t\\t131 # \\tサイト導線B\\t23\\t\\t\\t\\t35 ABdat &lt;- matrix(c(50, 131, 23, 35), ncol = 2, byrow = T) chisq.test(ABdat) #&gt; #&gt; Pearson&#39;s Chi-squared test with Yates&#39; continuity correction #&gt; #&gt; data: ABdat #&gt; X-squared = 2.4566, df = 1, p-value = 0.117 # 導線Aでコンバージョンしない人が10人増えた \\t\\t\\t\\t\\t\\t有\\t\\t\\t無 # \\tサイト導線A\\t50\\t\\t\\t141 \\tサイト導線B\\t23\\t\\t\\t 35 ABdat2 &lt;- matrix(c(50, 141, 23, 35), ncol = 2, byrow = T) chisq.test(ABdat2) #&gt; #&gt; Pearson&#39;s Chi-squared test with Yates&#39; continuity correction #&gt; #&gt; data: ABdat2 #&gt; X-squared = 3.2764, df = 1, p-value = 0.07028 # Fisherの正確確率検定 fisher.test(ABdat2) #&gt; #&gt; Fisher&#39;s Exact Test for Count Data #&gt; #&gt; data: ABdat2 #&gt; p-value = 0.06915 #&gt; alternative hypothesis: true odds ratio is not equal to 1 #&gt; 95 percent confidence interval: #&gt; 0.2796541 1.0568106 #&gt; sample estimates: #&gt; odds ratio #&gt; 0.5410443 3.2.2 適合度検定 # メンデルのデータ（エンドウの交雑実験） 種子の特徴(形質), 黄色・丸い, # 黄色・しわ, 緑色・丸い, 緑色・しわ obs &lt;- c(315, 101, 108, 32) # 観測度数 prob &lt;- c(9, 3, 3, 1)/16 # 理論確率分布 chisq.test(obs, p = prob) # obs と prob を用いたカイ二乗検定 #&gt; #&gt; Chi-squared test for given probabilities #&gt; #&gt; data: obs #&gt; X-squared = 0.47002, df = 3, p-value = 0.9254 # 確認用 ex &lt;- prob * sum(obs) chisq &lt;- sum((obs - ex)^2/ex) pval &lt;- 1 - pchisq(chisq, 3) 3.3 パート3: 事例(統計テストデータ) testdat &lt;- read.csv(&quot;BS_stattest.csv&quot;, header = F) # year(学年), MF(性別:男性1女性2), AS(文理:文系1その他2理系3), # math(数学履修年数), work(勤務年数), stat(統計学経験0-2), # MS(経営科学好き嫌い0-3), s4(4級相当得点), s3(3級相当得点), s2(2級相当得点) colnames(testdat) &lt;- c(&quot;year&quot;, &quot;MF&quot;, &quot;AS&quot;, &quot;math&quot;, &quot;work&quot;, &quot;stat&quot;, &quot;MS&quot;, &quot;s4&quot;, &quot;s3&quot;, &quot;s2&quot;) score &lt;- apply(testdat[, c(&quot;s4&quot;, &quot;s3&quot;, &quot;s2&quot;)], 1, sum) testdat2 &lt;- cbind(testdat, score) # モダンな方法 library(tidyverse) testdat2 &lt;- testdat %&gt;% mutate(score = s4 + # s3 + s2) # データの要約 attach()を使わない場合: table(testdat2$MF) table(testdat2[, # c(&#39;MF&#39;, &#39;AS&#39;)]) table(testdat2$s3) attach(testdat2) table(MF) #&gt; MF #&gt; 1 2 #&gt; 29 8 table(MF, AS) #&gt; AS #&gt; MF 1 2 3 #&gt; 1 17 3 9 #&gt; 2 4 1 3 table(s3) #&gt; s3 #&gt; 3 4 5 6 7 8 9 #&gt; 3 2 5 10 5 10 2 summary(score) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; 10.00 16.00 18.00 17.97 20.00 24.00 fivenum(score) #&gt; [1] 10 16 18 20 24 hist(score) # 相関係数 cor(testdat[, c(&#39;math&#39;, &#39;s2&#39;)]) cor(testdat[, c(&#39;math&#39;, &#39;s3&#39;)]) # cor(testdat[, c(&#39;math&#39;, &#39;s4&#39;)]) cor(math, s2) #&gt; [1] 0.04241976 cor(math, s3) #&gt; [1] 0.2481946 cor(math, s4) #&gt; [1] 0.3205779 pairs(testdat[, 8:10]) # cor(testdat[, c(&#39;MS&#39;, &#39;s4&#39;, &#39;s3&#39;, &#39;s2&#39;)]) cor(cbind(MS, s4, s3, s2)) #&gt; MS s4 s3 s2 #&gt; MS 1.0000000 0.2592955 0.4922877 0.2600562 #&gt; s4 0.2592955 1.0000000 0.1315443 0.1245631 #&gt; s3 0.4922877 0.1315443 1.0000000 0.6435060 #&gt; s2 0.2600562 0.1245631 0.6435060 1.0000000 cor(MS, math) #&gt; [1] 0.2864297 # 箱ひげ図 boxplot(score ~ factor(MF)) # 2-level factor boxplot(score ~ factor(MS)) # 4-level factor # 平均値の差の検定 score_MF &lt;- split(score, factor(MF)) t.test(score_MF$&quot;1&quot;, score_MF$&quot;2&quot;) #&gt; #&gt; Welch Two Sample t-test #&gt; #&gt; data: score_MF$&quot;1&quot; and score_MF$&quot;2&quot; #&gt; t = 2.8923, df = 13.276, p-value = 0.01237 #&gt; alternative hypothesis: true difference in means is not equal to 0 #&gt; 95 percent confidence interval: #&gt; 0.884667 6.063609 #&gt; sample estimates: #&gt; mean of x mean of y #&gt; 18.72414 15.25000 # score2 &lt;- testdat[, &#39;s2&#39;] score3 &lt;- testdat[, &#39;s3&#39;] score4 &lt;- testdat[, &#39;s4&#39;] # t.test(score4, score3, paired = T, alternative = &#39;greater&#39;) t.test(score3, # score2, paired = T, alternative = &#39;greater&#39;) # ペア検定 t.test(s4, s3, paired = T, alternative = &quot;greater&quot;) #&gt; #&gt; Paired t-test #&gt; #&gt; data: s4 and s3 #&gt; t = 0.87426, df = 36, p-value = 0.1939 #&gt; alternative hypothesis: true mean difference is greater than 0 #&gt; 95 percent confidence interval: #&gt; -0.2516528 Inf #&gt; sample estimates: #&gt; mean difference #&gt; 0.2702703 t.test(s3, s2, paired = T, alternative = &quot;greater&quot;) #&gt; #&gt; Paired t-test #&gt; #&gt; data: s3 and s2 #&gt; t = 5.305, df = 36, p-value = 2.95e-06 #&gt; alternative hypothesis: true mean difference is greater than 0 #&gt; 95 percent confidence interval: #&gt; 0.9212852 Inf #&gt; sample estimates: #&gt; mean difference #&gt; 1.351351 # 得点の差のt値の計算 (確認用) m &lt;- mean(s3 - s2) v &lt;- var(s3 - s2) tt &lt;- m/sqrt(v/(length(s3))) # var.test(x, y, ratio = 1, # alternative = c(&quot;two.sided&quot;, &quot;less&quot;, &quot;greater&quot;), # conf.level = 0.95, ...) # Performs an F test to compare the variances of two samples from normal populations. # aaa &lt;- table(testdat[, c(&#39;MF&#39;, &#39;AS&#39;)]) aaa &lt;- table(MF, AS) chisq.test(aaa) #&gt; #&gt; Pearson&#39;s Chi-squared test #&gt; #&gt; data: aaa #&gt; X-squared = 0.18986, df = 2, p-value = 0.9094 # aaa &lt;- table(testdat[, c(&#39;MS&#39;, &#39;AS&#39;)]) aaa &lt;- table(MS, AS) chisq.test(aaa) #&gt; #&gt; Pearson&#39;s Chi-squared test #&gt; #&gt; data: aaa #&gt; X-squared = 16.044, df = 6, p-value = 0.01352 detach(testdat2) "],["分散分析-anova.html", "4 分散分析 (ANOVA) 4.1 分散分析 (操作編)", " 4 分散分析 (ANOVA) 4.1 分散分析 (操作編) 4.1.1 1元配置ANOVA # 仮想データセットの作成 (数値例1) グループ数: k=3 k &lt;- 3 ttt1 &lt;- c(8, 7, 9, 6, 8) ttt2 &lt;- c(7, 5, 4) ttt3 &lt;- c(6, 2, 1, 3) # 縦型に整形 dat1 &lt;- data.frame(grp = c(rep(&quot;ttt1&quot;, length(ttt1)), rep(&quot;ttt2&quot;, length(ttt2)), rep(&quot;ttt3&quot;, length(ttt3))), resp = c(ttt1, ttt2, ttt3)) # ANOVAの実行 res_aov &lt;- aov(resp ~ grp, data = dat1) # 実行結果の表示 summary(res_aov) #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; grp 2 47.13 23.567 8.887 0.0074 ** #&gt; Residuals 9 23.87 2.652 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # 確認用 (飛ばしてOK) library(tidyverse) # 全体平方和 (SST) の計算 avg &lt;- mean(dat1$resp) # 全体平均 # (mean(dat1$resp^2) - avg^2) * length(dat1$resp) sst &lt;- sum((dat1$resp - avg)^2) # 全体平方和 # 群内平方和 (SSW) の計算 (※) 発展的なコード library(tidyverse) ssw_j &lt;- dat1 %&gt;% group_by(grp) %&gt;% summarize(ssq = (mean(resp^2) - mean(resp)^2) * length(resp)) ssw &lt;- sum(ssw_j$ssq) # 群内平方和 # 群間平方和 (SSB) の計算 n_vec &lt;- c(length(ttt1), length(ttt2), length(ttt3)) avg_j &lt;- dat1 %&gt;% group_by(grp) %&gt;% summarize(avg = mean(resp)) ssb &lt;- sum((avg_j$avg - avg)^2 * n_vec) # 群間平方和 # または, ssb &lt;- sst - ssw # 群間平方和 # 自由度 (df) SST: length(dat1$resp) - 1, SSB: K - 1, SSW: length(dat1$resp) - # K # 平均平方和の計算 msb &lt;- ssb/(k - 1) msw &lt;- ssw/(length(dat1$resp) - k) # F値の計算 f_val &lt;- msb/msw # p値の計算 pf(f_val, k - 1, length(dat1$resp) - k, lower.tail = F) #&gt; [1] 0.007402874 4.1.2 2元配置ANOVA # 仮想データセットの作成 (数値例2) fctA_val &lt;- c(&quot;a1&quot;, &quot;a2&quot;, &quot;a3&quot;, &quot;a4&quot;) fctB_val &lt;- c(&quot;b1&quot;, &quot;b2&quot;, &quot;b3&quot;) val &lt;- matrix(c(8, 7, 6, 7, 5, 2, 6, 4, 3, 8, 6, 2), nrow = 4, byrow = T) colnames(val) &lt;- fctB_val rownames(val) &lt;- fctA_val dat2 &lt;- as.data.frame(val) %&gt;% rownames_to_column(var = &quot;fctA&quot;) %&gt;% pivot_longer(cols = b1:b3, names_to = &quot;fctB&quot;, values_to = &quot;resp&quot;) %&gt;% data.frame() # SST sum((val - mean(val))^2) # ANOVAの実行 res_aov &lt;- aov(resp ~ fctA + fctB, data = dat2) # 実行結果の表示 summary(res_aov) #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; fctA 3 12.67 4.222 4.343 0.05988 . #&gt; fctB 2 32.17 16.083 16.543 0.00362 ** #&gt; Residuals 6 5.83 0.972 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # interactionなし res_aov &lt;- aov(resp ~ fctA * fctB, data = dat2) # summary(res_aov) 4.1.3 分析例 データ1: 2業種口コミサイト(仮想データ) t検定と結果の比較を行う. データの読み込み, 並べ替え x &lt;- read.csv(&quot;dat_1-1.csv&quot;) # 口コミサイト(仮想データ) 2つの業種(A, B), 各20社 # 各企業に対する(元)従業員による平均評価点(1--5) head(x) #&gt; A B #&gt; 1 2.257 4.065 #&gt; 2 4.273 4.771 #&gt; 3 4.205 2.793 #&gt; 4 3.251 3.003 #&gt; 5 1.534 3.250 #&gt; 6 3.327 3.390 # xの整形 (横型 → 縦型) xvec &lt;- as.vector(as.matrix(x)) # xをベクトル化 yvec &lt;- c(rep(&quot;A&quot;, 20), rep(&quot;B&quot;, 20)) xdf &lt;- data.frame(score = xvec, type = yvec) str(xdf) #&gt; &#39;data.frame&#39;: 40 obs. of 2 variables: #&gt; $ score: num 2.26 4.27 4.21 3.25 1.53 ... #&gt; $ type : chr &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; ... xdf$score #&gt; [1] 2.257 4.273 4.205 3.251 1.534 3.327 3.596 3.421 2.544 2.110 2.262 2.550 #&gt; [13] 2.790 2.033 3.688 3.440 3.797 3.644 2.906 1.230 4.065 4.771 2.793 3.003 #&gt; [25] 3.250 3.390 2.834 2.171 4.654 3.051 4.789 4.373 3.325 3.028 4.127 2.796 #&gt; [37] 2.015 4.379 3.380 3.793 xdf[, &quot;score&quot;] #&gt; [1] 2.257 4.273 4.205 3.251 1.534 3.327 3.596 3.421 2.544 2.110 2.262 2.550 #&gt; [13] 2.790 2.033 3.688 3.440 3.797 3.644 2.906 1.230 4.065 4.771 2.793 3.003 #&gt; [25] 3.250 3.390 2.834 2.171 4.654 3.051 4.789 4.373 3.325 3.028 4.127 2.796 #&gt; [37] 2.015 4.379 3.380 3.793 xdf[, 1] #&gt; [1] 2.257 4.273 4.205 3.251 1.534 3.327 3.596 3.421 2.544 2.110 2.262 2.550 #&gt; [13] 2.790 2.033 3.688 3.440 3.797 3.644 2.906 1.230 4.065 4.771 2.793 3.003 #&gt; [25] 3.250 3.390 2.834 2.171 4.654 3.051 4.789 4.373 3.325 3.028 4.127 2.796 #&gt; [37] 2.015 4.379 3.380 3.793 # 代替的方法 stack(x) ## library(tidyverse) gather関数(横型→縦型), spread関数(縦型→横型) 1元ANOVAの実行 # 1元ANOVA attach(xdf) res_aov &lt;- aov(score ~ type) summary(res_aov) ### 代替アプローチ (1) oneway.test(score ~ type) # デフォルト：等分散を仮定しない oneway.test(score ~ type, var.equal = T) # 等分散を仮定 ### 代替アプローチ (2) res_lm &lt;- lm(score ~ type) res_anova &lt;- anova(res_lm) res_anova # summary()を使わずに出力 detach(xdf) # 等分散検定 var.test(x$A, x$B) boxplot(x) # t検定との比較 t.test(x$A, x$B) t.test(x$A, x$B, var.equal = T) ## t.test(x$A, x$B, paired=T) 4.1.3.1 データ2: 統計小テストデータ year(学年), MF(性別:男性1女性2), AS(文理:文系1その他2理系3), math(数学履修年数), work(勤務年数), stat(統計学経験0-2), MS(経営科学好き嫌い0-3), s4(4級相当得点), s3(3級相当得点), s2(2級相当得点) testdat &lt;- read.csv(&quot;BS_stattest.csv&quot;, header = F) colnames(testdat) &lt;- c(&quot;year&quot;, &quot;MF&quot;, &quot;AS&quot;, &quot;math&quot;, &quot;work&quot;, &quot;stat&quot;, &quot;MS&quot;, &quot;s4&quot;, &quot;s3&quot;, &quot;s2&quot;) # 総合得点の計算, 列に追加 score &lt;- apply(testdat[, c(&quot;s4&quot;, &quot;s3&quot;, &quot;s2&quot;)], 1, sum) testdat2 &lt;- cbind(testdat, score) # モダンな方法 library(tidyverse) testdat2 &lt;- testdat %&gt;% mutate(score = s4 + # s3 + s2) str(testdat2) #&gt; &#39;data.frame&#39;: 37 obs. of 11 variables: #&gt; $ year : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ MF : int 1 1 1 1 2 1 1 1 1 1 ... #&gt; $ AS : int 1 2 1 1 1 1 1 1 1 3 ... #&gt; $ math : int 13 6 8 7 5 5 5 6 8 10 ... #&gt; $ work : int 7 6 4 4 1 5 4 7 0 8 ... #&gt; $ stat : int 1 0 1 0 0 0 0 0 0 0 ... #&gt; $ MS : int 2 3 1 1 1 1 0 1 1 2 ... #&gt; $ s4 : int 7 8 7 7 7 5 5 7 8 7 ... #&gt; $ s3 : int 8 8 6 9 5 8 3 7 6 8 ... #&gt; $ s2 : int 7 8 6 7 4 7 2 6 7 5 ... #&gt; $ score: int 22 24 19 23 16 20 10 20 21 20 ... # → 得点以外の変数も数値(整数)で入力されている # 分割表(クロス集計表) table(testdat2[, c(&quot;MF&quot;, &quot;AS&quot;)]) #&gt; AS #&gt; MF 1 2 3 #&gt; 1 17 3 9 #&gt; 2 4 1 3 # 相関係数 cor(testdat2[, c(&quot;math&quot;, &quot;s2&quot;)]) #&gt; math s2 #&gt; math 1.00000000 0.04241976 #&gt; s2 0.04241976 1.00000000 cor(testdat2[, c(&quot;MS&quot;, &quot;s4&quot;, &quot;s3&quot;, &quot;s2&quot;)]) #&gt; MS s4 s3 s2 #&gt; MS 1.0000000 0.2592955 0.4922877 0.2600562 #&gt; s4 0.2592955 1.0000000 0.1315443 0.1245631 #&gt; s3 0.4922877 0.1315443 1.0000000 0.6435060 #&gt; s2 0.2600562 0.1245631 0.6435060 1.0000000 cor(testdat2[, c(&quot;MS&quot;, &quot;math&quot;)]) #&gt; MS math #&gt; MS 1.0000000 0.2864297 #&gt; math 0.2864297 1.0000000 # 箱ひげ図 attach(testdat2) par(mfrow = c(1, 2)) boxplot(score ~ factor(MF)) # 2-level factor boxplot(score ~ factor(MS)) # 4-level factor aaa &lt;- table(testdat2[, c(&quot;MF&quot;, &quot;AS&quot;)]) chisq.test(aaa) #&gt; #&gt; Pearson&#39;s Chi-squared test #&gt; #&gt; data: aaa #&gt; X-squared = 0.18986, df = 2, p-value = 0.9094 aaa &lt;- table(testdat2[, c(&quot;MS&quot;, &quot;AS&quot;)]) chisq.test(aaa) #&gt; #&gt; Pearson&#39;s Chi-squared test #&gt; #&gt; data: aaa #&gt; X-squared = 16.044, df = 6, p-value = 0.01352 1元ANOVA # 1-way ANOVA summary(aov(score ~ factor(MS))) #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; factor(MS) 3 108.2 36.07 3.282 0.0329 * #&gt; Residuals 33 362.7 10.99 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # 代替的アプローチ anova(lm(score ~ factor(MS))) #&gt; Analysis of Variance Table #&gt; #&gt; Response: score #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; factor(MS) 3 108.22 36.074 3.2817 0.03293 * #&gt; Residuals 33 362.75 10.992 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 2元ANOVA ### 2-way ANOVA 交互作用プロット interaction.plot(factor(MS), factor(MF), score) summary(aov(score ~ factor(MS) + factor(MF))) # 主効果項のみ (交互作用項なし) #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; factor(MS) 3 108.2 36.07 3.571 0.0246 * #&gt; factor(MF) 1 39.5 39.49 3.909 0.0567 . #&gt; Residuals 32 323.3 10.10 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 summary(aov(score ~ factor(MS) * factor(MF))) # 交互作用項有 #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; factor(MS) 3 108.22 36.07 3.727 0.0217 * #&gt; factor(MF) 1 39.49 39.49 4.080 0.0524 . #&gt; factor(MS):factor(MF) 2 32.92 16.46 1.701 0.1997 #&gt; Residuals 30 290.35 9.68 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # 代替的アプローチ anova(lm(score ~ factor(MS) + factor(AS))) # 主効果項のみ (交互作用項なし) #&gt; Analysis of Variance Table #&gt; #&gt; Response: score #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; factor(MS) 3 108.22 36.074 3.3147 0.03267 * #&gt; factor(AS) 2 25.38 12.689 1.1659 0.32493 #&gt; Residuals 31 337.37 10.883 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 anova(lm(score ~ factor(AS) + factor(MS))) # 分解順の影響 #&gt; Analysis of Variance Table #&gt; #&gt; Response: score #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; factor(AS) 2 3.50 1.748 0.1607 0.85229 #&gt; factor(MS) 3 130.10 43.368 3.9849 0.01642 * #&gt; Residuals 31 337.37 10.883 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 anova(lm(score ~ factor(MS) * factor(AS))) # 交互作用項有 #&gt; Analysis of Variance Table #&gt; #&gt; Response: score #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; factor(MS) 3 108.22 36.074 3.3063 0.03397 * #&gt; factor(AS) 2 25.38 12.689 1.1629 0.32672 #&gt; factor(MS):factor(AS) 2 20.96 10.478 0.9603 0.39460 #&gt; Residuals 29 316.42 10.911 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 lm(score ~ factor(MS) + factor(MF)) #&gt; #&gt; Call: #&gt; lm(formula = score ~ factor(MS) + factor(MF)) #&gt; #&gt; Coefficients: #&gt; (Intercept) factor(MS)1 factor(MS)2 factor(MS)3 factor(MF)2 #&gt; 15.552 2.693 3.820 8.448 -2.604 detach(testdat2) (自主課題) 対応のある分散分析の実行: 山田・杉澤・村井 (2008)『Rによるやさしい統計学』「第7章 分散分析」を参照せよ. データ3: 経営科学アンケート グループ(group), 負荷(workload), 難易度(difficulty), 有用性(usefulness), 貢献度(contribution), 数学スキル(Math), エクセルスキル(Excel), 文理(AS), 業務経験(Work), 性別(MF) testdat &lt;- read.csv(&quot;FB_dist.csv&quot;, header = T) attach(testdat) # 実行1 aov(difficulty ~ Math) #&gt; Call: #&gt; aov(formula = difficulty ~ Math) #&gt; #&gt; Terms: #&gt; Math Residuals #&gt; Sum of Squares 20.02254 52.62250 #&gt; Deg. of Freedom 1 113 #&gt; #&gt; Residual standard error: 0.6824118 #&gt; Estimated effects may be unbalanced # anova(lm(difficulty ~ Math)) # 実行2 aov(difficulty ~ factor(Math)) #&gt; Call: #&gt; aov(formula = difficulty ~ factor(Math)) #&gt; #&gt; Terms: #&gt; factor(Math) Residuals #&gt; Sum of Squares 21.81657 50.82847 #&gt; Deg. of Freedom 4 110 #&gt; #&gt; Residual standard error: 0.6797624 #&gt; Estimated effects may be unbalanced # anova(lm(difficulty ~ factor(Math))) detach(testdat) (自主課題) 対応のある分散分析の実行を試みよ. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
